
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000cb2  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000cb2  00000d66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000a6  008000a6  00000dac  2**0
                  ALLOC
  3 .eeprom       00000009  00810000  00810000  00000dac  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000060  00000000  00000000  00000db5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002a0  00000000  00000000  00000e15  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a8b  00000000  00000000  000010b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025d  00000000  00000000  00001b40  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  00001d9d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  000024f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000357  00000000  00000000  00002670  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000576  00000000  00000000  000029c7  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002f3d  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	d3 c2       	rjmp	.+1446   	; 0x5a8 <__ctors_end>
   2:	ed c2       	rjmp	.+1498   	; 0x5de <__bad_interrupt>
   4:	ec c2       	rjmp	.+1496   	; 0x5de <__bad_interrupt>
   6:	eb c2       	rjmp	.+1494   	; 0x5de <__bad_interrupt>
   8:	ea c2       	rjmp	.+1492   	; 0x5de <__bad_interrupt>
   a:	e9 c2       	rjmp	.+1490   	; 0x5de <__bad_interrupt>
   c:	23 c3       	rjmp	.+1606   	; 0x654 <__vector_6>
   e:	e7 c2       	rjmp	.+1486   	; 0x5de <__bad_interrupt>
  10:	e6 c2       	rjmp	.+1484   	; 0x5de <__bad_interrupt>
  12:	e5 c2       	rjmp	.+1482   	; 0x5de <__bad_interrupt>
  14:	e4 c2       	rjmp	.+1480   	; 0x5de <__bad_interrupt>
  16:	e3 c2       	rjmp	.+1478   	; 0x5de <__bad_interrupt>
  18:	e2 c2       	rjmp	.+1476   	; 0x5de <__bad_interrupt>
  1a:	e1 c2       	rjmp	.+1474   	; 0x5de <__bad_interrupt>
  1c:	e0 c2       	rjmp	.+1472   	; 0x5de <__bad_interrupt>
  1e:	df c2       	rjmp	.+1470   	; 0x5de <__bad_interrupt>
  20:	de c2       	rjmp	.+1468   	; 0x5de <__bad_interrupt>
  22:	dd c2       	rjmp	.+1466   	; 0x5de <__bad_interrupt>
  24:	dc c2       	rjmp	.+1464   	; 0x5de <__bad_interrupt>

00000026 <bitmap_colon>:
  26:	00 00 00 00 00 00 00 00 00 18 18 18 00 0c 0c 0c     ................
  36:	00 00 00 00                                         ....

0000003a <ssd1306oled_font6x8>:
  3a:	00 00 00 00 00 00 00 00 00 2f 00 00 00 00 07 00     ........./......
  4a:	07 00 00 14 7f 14 7f 14 00 24 2a 7f 2a 12 00 62     .........$*.*..b
  5a:	64 08 13 23 00 36 49 55 22 50 00 00 05 03 00 00     d..#.6IU"P......
  6a:	00 00 1c 22 41 00 00 00 41 22 1c 00 00 14 08 3e     ..."A...A".....>
  7a:	08 14 00 08 08 3e 08 08 00 00 00 a0 60 00 00 08     .....>......`...
  8a:	08 08 08 08 00 00 60 60 00 00 00 20 10 08 04 02     ......``... ....
  9a:	00 3e 51 49 45 3e 00 00 42 7f 40 00 00 42 61 51     .>QIE>..B.@..BaQ
  aa:	49 46 00 21 41 45 4b 31 00 18 14 12 7f 10 00 27     IF.!AEK1.......'
  ba:	45 45 45 39 00 3c 4a 49 49 30 00 01 71 09 05 03     EEE9.<JII0..q...
  ca:	00 36 49 49 49 36 00 06 49 49 29 1e 00 00 36 36     .6III6..II)...66
  da:	00 00 00 00 56 36 00 00 00 08 14 22 41 00 00 14     ....V6....."A...
  ea:	14 14 14 14 00 00 41 22 14 08 00 02 01 51 09 06     ......A".....Q..
  fa:	00 32 49 59 51 3e 00 7c 12 11 12 7c 00 7f 49 49     .2IYQ>.|...|..II
 10a:	49 36 00 3e 41 41 41 22 00 7f 41 41 22 1c 00 7f     I6.>AAA"..AA"...
 11a:	49 49 49 41 00 7f 09 09 09 01 00 3e 41 49 49 7a     IIIA.......>AIIz
 12a:	00 7f 08 08 08 7f 00 00 41 7f 41 00 00 20 40 41     ........A.A.. @A
 13a:	3f 01 00 7f 08 14 22 41 00 7f 40 40 40 40 00 7f     ?....."A..@@@@..
 14a:	02 0c 02 7f 00 7f 04 08 10 7f 00 3e 41 41 41 3e     ...........>AAA>
 15a:	00 7f 09 09 09 06 00 3e 41 51 21 5e 00 7f 09 19     .......>AQ!^....
 16a:	29 46 00 46 49 49 49 31 00 01 01 7f 01 01 00 3f     )F.FIII1.......?
 17a:	40 40 40 3f 00 1f 20 40 20 1f 00 3f 40 38 40 3f     @@@?.. @ ..?@8@?
 18a:	00 63 14 08 14 63 00 07 08 70 08 07 00 61 51 49     .c...c...p...aQI
 19a:	45 43 00 00 7f 41 41 00 00 55 2a 55 2a 55 00 00     EC...AA..U*U*U..
 1aa:	41 41 7f 00 00 04 02 01 02 04 00 40 40 40 40 40     AA.........@@@@@
 1ba:	00 00 01 02 04 00 00 20 54 54 54 78 00 7f 48 44     ....... TTTx..HD
 1ca:	44 38 00 38 44 44 44 20 00 38 44 44 48 7f 00 38     D8.8DDD .8DDH..8
 1da:	54 54 54 18 00 08 7e 09 01 02 00 18 a4 a4 a4 7c     TTT...~........|
 1ea:	00 7f 08 04 04 78 00 00 44 7d 40 00 00 40 80 84     .....x..D}@..@..
 1fa:	7d 00 00 7f 10 28 44 00 00 00 41 7f 40 00 00 7c     }....(D...A.@..|
 20a:	04 18 04 78 00 7c 08 04 04 78 00 38 44 44 44 38     ...x.|...x.8DDD8
 21a:	00 fc 24 24 24 18 00 18 24 24 18 fc 00 7c 08 04     ..$$$...$$...|..
 22a:	04 08 00 48 54 54 54 20 00 04 3f 44 40 20 00 3c     ...HTTT ..?D@ .<
 23a:	40 40 20 7c 00 1c 20 40 20 1c 00 3c 40 30 40 3c     @@ |.. @ ..<@0@<
 24a:	00 44 28 10 28 44 00 1c a0 a0 a0 7c 00 44 64 54     .D(.(D.....|.DdT
 25a:	4c 44 00 00 08 77 41 00 00 00 00 63 00 00 00 00     LD...wA....c....
 26a:	41 77 08 00 00 08 04 08 08 04 00 3d 40 40 20 7d     Aw.........=@@ }
 27a:	00 3d 40 40 40 3d 00 21 54 54 54 79 00 7d 12 11     .=@@@=.!TTTy.}..
 28a:	12 7d 00 39 44 44 44 39 00 3d 42 42 42 3d 00 02     .}.9DDD9.=BBB=..
 29a:	05 02 00 00 00 7e 01 49 55 73                       .....~.IUs

000002a4 <init_sequence>:
 2a4:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
 2b4:	00 d5 f0 d9 22 da 12 db 20 8d 14                    ...."... ..

000002bf <bitmap_0>:
 2bf:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 2cf:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 e0     ................
 2df:	f8 fc 0e 07 03 03 03 03 07 1e fc f8 e0 00 01 07     ................
 2ef:	0f 1c 38 30 30 30 30 38 3c 1f 0f 03 00 00 00 00     ..800008<.......
 2ff:	00 00 00 00 00 00 00 00 00 00 00                    ...........

0000030a <bitmap_1>:
 30a:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 31a:	00 00 00 80 f0 fc fc 00 00 00 70 78 3c 1e 07 e3     ..........px<...
 32a:	ff ff 03 00 00 00 00 00 00 00 70 7f 7f 03 00 00     ..........p.....
 33a:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

00000346 <bitmap_2>:
 346:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 356:	00 00 00 00 00 c0 e0 e0 70 70 30 30 30 f0 e0 c0     ........pp000...
 366:	00 00 00 00 00 00 03 03 00 00 00 00 00 00 80 ff     ................
 376:	ff 1f 00 00 0e 1e 1e 1e 1e 1c 1c 18 18 1c 1e 37     ...............7
 386:	33 30 30 30 00 00 00 00 00 00 00 00 00 00 00 00     3000............
 396:	00 00 00 00 00                                      .....

0000039b <bitmap_3>:
 39b:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 3ab:	20 70 78 18 18 18 18 38 70 f0 e0 00 00 00 00 00      px....8p.......
 3bb:	00 00 00 18 18 1c 1c 37 77 e3 e0 80 00 00 06 0e     .......7w.......
 3cb:	0e 1c 38 38 30 30 30 38 1f 1f 07 00 00 00 00 00     ..880008........
 3db:	00 00 00 00 00 00 00 00 00 00 00                    ...........

000003e6 <bitmap_4>:
 3e6:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 3f6:	c0 fc fe 1e 00 00 00 00 00 00 00 80 80 00 00 0f     ................
 406:	7f ff e0 c0 c0 c0 e0 70 78 fe ff 9f 00 00 00 00     .......px.......
 416:	00 00 00 00 00 00 00 00 1f 3f 3f 00 00 00 00 00     .........??.....
 426:	00 00 00 00 00 00 00 00 00 00 00                    ...........

00000431 <bitmap_5>:
 431:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 441:	00 00 00 00 00 00 00 00 00 00 c0 f8 fe 1e 06 06     ................
 451:	06 06 06 06 06 0e 04 00 00 00 00 00 00 02 07 07     ................
 461:	07 06 06 0e 0e 1c 3c f8 f0 c0 00 00 00 00 00 1f     ......<.........
 471:	3f 70 70 60 60 60 60 60 70 70 3c 3f 1f 07 00 00     ?pp`````pp<?....
 481:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 491:	00 00 00 00                                         ....

00000495 <bitmap_6>:
 495:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 4a5:	00 00 00 80 e0 f0 78 38 1c 0c 0c 0c 0c 1c 18 00     ......x8........
 4b5:	00 f0 fe ff 3f 39 18 18 18 38 38 78 f0 e0 c0 00     ....?9...88x....
 4c5:	00 03 0f 1f 38 30 30 20 20 30 30 38 1f 0f 07 00     ....800  008....
 4d5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000004e5 <bitmap_7>:
 4e5:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 4f5:	00 38 30 30 30 30 30 30 f0 f0 00 00 00 00 00 00     .8000000........
 505:	00 30 30 30 30 30 fc ff 7f 70 70 60 20 00 00 00     .00000...pp` ...
 515:	00 00 00 00 3e 3f 0f 00 00 00 00 00 00 00 00 00     ....>?..........
 525:	00 00 00 00 00 00 00 00 00 00 00                    ...........

00000530 <bitmap_8>:
 530:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 f0     ................
 540:	f0 38 18 18 18 b8 f8 f0 00 00 00 01 03 e7 fc 3c     .8.............<
 550:	1c 3e 77 e3 c1 80 00 00 00 03 0f 1f 1c 38 30 30     .>w..........800
 560:	30 3f 1f 0f 00 00 00 00 00 00 00 00 00 00 00 00     0?..............
 570:	00                                                  .

00000571 <bitmap_9>:
 571:	00 00 00 00 00 00 00 00 00 00 00 00 e0 f8 f8 1c     ................
 581:	0c 0c 1c bc f8 f0 00 07 0f 1f 1c 18 18 f8 ff ff     ................
 591:	01 00 00 00 00 00 00 00 3f 3f 3f 00 00 00 00 00     ........???.....
 5a1:	00 00 00 00 00 00 00                                .......

000005a8 <__ctors_end>:
 5a8:	11 24       	eor	r1, r1
 5aa:	1f be       	out	0x3f, r1	; 63
 5ac:	cf e5       	ldi	r28, 0x5F	; 95
 5ae:	d4 e0       	ldi	r29, 0x04	; 4
 5b0:	de bf       	out	0x3e, r29	; 62
 5b2:	cd bf       	out	0x3d, r28	; 61

000005b4 <__do_copy_data>:
 5b4:	10 e0       	ldi	r17, 0x00	; 0
 5b6:	a0 e6       	ldi	r26, 0x60	; 96
 5b8:	b0 e0       	ldi	r27, 0x00	; 0
 5ba:	e2 eb       	ldi	r30, 0xB2	; 178
 5bc:	fc e0       	ldi	r31, 0x0C	; 12
 5be:	02 c0       	rjmp	.+4      	; 0x5c4 <.do_copy_data_start>

000005c0 <.do_copy_data_loop>:
 5c0:	05 90       	lpm	r0, Z+
 5c2:	0d 92       	st	X+, r0

000005c4 <.do_copy_data_start>:
 5c4:	a6 3a       	cpi	r26, 0xA6	; 166
 5c6:	b1 07       	cpc	r27, r17
 5c8:	d9 f7       	brne	.-10     	; 0x5c0 <.do_copy_data_loop>

000005ca <__do_clear_bss>:
 5ca:	10 e0       	ldi	r17, 0x00	; 0
 5cc:	a6 ea       	ldi	r26, 0xA6	; 166
 5ce:	b0 e0       	ldi	r27, 0x00	; 0
 5d0:	01 c0       	rjmp	.+2      	; 0x5d4 <.do_clear_bss_start>

000005d2 <.do_clear_bss_loop>:
 5d2:	1d 92       	st	X+, r1

000005d4 <.do_clear_bss_start>:
 5d4:	af 3a       	cpi	r26, 0xAF	; 175
 5d6:	b1 07       	cpc	r27, r17
 5d8:	e1 f7       	brne	.-8      	; 0x5d2 <.do_clear_bss_loop>
 5da:	02 d0       	rcall	.+4      	; 0x5e0 <main>
 5dc:	68 c3       	rjmp	.+1744   	; 0xcae <_exit>

000005de <__bad_interrupt>:
 5de:	10 cd       	rjmp	.-1504   	; 0x0 <__vectors>

000005e0 <main>:

int main (void)
{
	/* Init OLED Display */
	
    lcd_init(LCD_DISP_ON);
 5e0:	8f ea       	ldi	r24, 0xAF	; 175
 5e2:	f9 d2       	rcall	.+1522   	; 0xbd6 <lcd_init>
	lcd_clrscr();
 5e4:	92 d1       	rcall	.+804    	; 0x90a <lcd_clrscr>
        
     /* put string to display (line 7) with linefeed */
    
	lcd_gotoxy(0,7); 
 5e6:	80 e0       	ldi	r24, 0x00	; 0
 5e8:	67 e0       	ldi	r22, 0x07	; 7
 5ea:	6e d1       	rcall	.+732    	; 0x8c8 <lcd_gotoxy>
	lcd_puts("OLED Clock                       ");
 5ec:	80 e6       	ldi	r24, 0x60	; 96
 5ee:	90 e0       	ldi	r25, 0x00	; 0
 5f0:	03 d1       	rcall	.+518    	; 0x7f8 <lcd_puts>
	lcd_home();
 5f2:	87 d1       	rcall	.+782    	; 0x902 <lcd_home>
	lcd_set_contrast(196);
 5f4:	84 ec       	ldi	r24, 0xC4	; 196
 5f6:	45 d1       	rcall	.+650    	; 0x882 <lcd_set_contrast>

	/* Read Timer Calibration Values from EEPROM */

	timer_cal_div = eeprom_read_byte(&EE_timer_cal_div); 
 5f8:	80 e0       	ldi	r24, 0x00	; 0
 5fa:	90 e0       	ldi	r25, 0x00	; 0
 5fc:	3b d3       	rcall	.+1654   	; 0xc74 <__eerd_byte_m8>
 5fe:	80 93 84 00 	sts	0x0084, r24
	timer_cal_val = eeprom_read_word(&EE_timer_cal_val);
 602:	81 e0       	ldi	r24, 0x01	; 1
 604:	90 e0       	ldi	r25, 0x00	; 0
 606:	3e d3       	rcall	.+1660   	; 0xc84 <__eerd_word_m8>
 608:	90 93 83 00 	sts	0x0083, r25
 60c:	80 93 82 00 	sts	0x0082, r24
  	timer_reg_val = eeprom_read_word(&EE_timer_reg_val);
 610:	83 e0       	ldi	r24, 0x03	; 3
 612:	90 e0       	ldi	r25, 0x00	; 0
 614:	37 d3       	rcall	.+1646   	; 0xc84 <__eerd_word_m8>
 616:	90 93 86 00 	sts	0x0086, r25
 61a:	80 93 85 00 	sts	0x0085, r24

	/* set Timer 1 for Clock Control */


	TCCR1B = ((1 << WGM12) | timer_reg_div);
 61e:	2d e0       	ldi	r18, 0x0D	; 13
 620:	2e bd       	out	0x2e, r18	; 46
	OCR1A = timer_reg_val;
 622:	9b bd       	out	0x2b, r25	; 43
 624:	8a bd       	out	0x2a, r24	; 42


	/* Timer Interrupt Control*/
	TIMSK = (1 << OCIE1A); 
 626:	80 e1       	ldi	r24, 0x10	; 16
 628:	89 bf       	out	0x39, r24	; 57

	/* Global Interrupt Enable */ 
	sei();
 62a:	78 94       	sei

	/* Initialize time variables */ 
	sec_one = 0;
 62c:	10 92 a7 00 	sts	0x00A7, r1
	sec_ten = 5; 
 630:	85 e0       	ldi	r24, 0x05	; 5
 632:	80 93 ab 00 	sts	0x00AB, r24

	min_ten = 5;
 636:	80 93 aa 00 	sts	0x00AA, r24
	min_one = 9;
 63a:	89 e0       	ldi	r24, 0x09	; 9
 63c:	80 93 ad 00 	sts	0x00AD, r24

	hour_ten = 0;
 640:	10 92 ac 00 	sts	0x00AC, r1
	hour_one = 0; 
 644:	10 92 ae 00 	sts	0x00AE, r1

	/* Update LCD Display */ 

	lcd_update_4(min_ten, min_one, sec_ten, sec_one);  
 648:	85 e0       	ldi	r24, 0x05	; 5
 64a:	69 e0       	ldi	r22, 0x09	; 9
 64c:	45 e0       	ldi	r20, 0x05	; 5
 64e:	20 e0       	ldi	r18, 0x00	; 0
 650:	e2 d1       	rcall	.+964    	; 0xa16 <lcd_update_4>
 652:	ff cf       	rjmp	.-2      	; 0x652 <main+0x72>

00000654 <__vector_6>:
uint8_t EEMEM EE_init_hour_one = 0; 
uint8_t EEMEM EE_init_min_ten = 0; 
uint8_t EEMEM EE_init_min_one = 0; 

/* Timer Interrupt */
ISR(TIMER1_COMPA_vect){
 654:	1f 92       	push	r1
 656:	0f 92       	push	r0
 658:	0f b6       	in	r0, 0x3f	; 63
 65a:	0f 92       	push	r0
 65c:	11 24       	eor	r1, r1
 65e:	2f 93       	push	r18
 660:	3f 93       	push	r19
 662:	4f 93       	push	r20
 664:	5f 93       	push	r21
 666:	6f 93       	push	r22
 668:	7f 93       	push	r23
 66a:	8f 93       	push	r24
 66c:	9f 93       	push	r25
 66e:	af 93       	push	r26
 670:	bf 93       	push	r27
 672:	ef 93       	push	r30
 674:	ff 93       	push	r31

	msec++;
 676:	80 91 a8 00 	lds	r24, 0x00A8
 67a:	90 91 a9 00 	lds	r25, 0x00A9
 67e:	01 96       	adiw	r24, 0x01	; 1
 680:	90 93 a9 00 	sts	0x00A9, r25
 684:	80 93 a8 00 	sts	0x00A8, r24

	if (msec == 4) {
 688:	04 97       	sbiw	r24, 0x04	; 4
 68a:	d9 f4       	brne	.+54     	; 0x6c2 <__vector_6+0x6e>
		
		 OCR1A = timer_cal_val;  
 68c:	80 91 82 00 	lds	r24, 0x0082
 690:	90 91 83 00 	lds	r25, 0x0083
 694:	9b bd       	out	0x2b, r25	; 43
 696:	8a bd       	out	0x2a, r24	; 42
		 TCCR1B = ((1 << WGM12) | timer_cal_div);
 698:	80 91 84 00 	lds	r24, 0x0084
 69c:	88 60       	ori	r24, 0x08	; 8
 69e:	8e bd       	out	0x2e, r24	; 46
		 TCNT1 = 0; 
 6a0:	1d bc       	out	0x2d, r1	; 45
 6a2:	1c bc       	out	0x2c, r1	; 44
		 
		 if(update_lcd == 1){
 6a4:	80 91 a6 00 	lds	r24, 0x00A6
 6a8:	81 30       	cpi	r24, 0x01	; 1
 6aa:	59 f4       	brne	.+22     	; 0x6c2 <__vector_6+0x6e>
		 	lcd_update_4(min_ten, min_one, sec_ten, sec_one); 
 6ac:	80 91 aa 00 	lds	r24, 0x00AA
 6b0:	60 91 ad 00 	lds	r22, 0x00AD
 6b4:	40 91 ab 00 	lds	r20, 0x00AB
 6b8:	20 91 a7 00 	lds	r18, 0x00A7
 6bc:	ac d1       	rcall	.+856    	; 0xa16 <lcd_update_4>
			update_lcd = 0; 
 6be:	10 92 a6 00 	sts	0x00A6, r1
			}
	}	

	if (msec == 5){	
 6c2:	80 91 a8 00 	lds	r24, 0x00A8
 6c6:	90 91 a9 00 	lds	r25, 0x00A9
 6ca:	05 97       	sbiw	r24, 0x05	; 5
 6cc:	09 f0       	breq	.+2      	; 0x6d0 <__vector_6+0x7c>
 6ce:	57 c0       	rjmp	.+174    	; 0x77e <__vector_6+0x12a>
		OCR1A = timer_reg_val;
 6d0:	80 91 85 00 	lds	r24, 0x0085
 6d4:	90 91 86 00 	lds	r25, 0x0086
 6d8:	9b bd       	out	0x2b, r25	; 43
 6da:	8a bd       	out	0x2a, r24	; 42
		TCCR1B = ((1 << WGM12) | timer_reg_div);
 6dc:	8d e0       	ldi	r24, 0x0D	; 13
 6de:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0;
 6e0:	1d bc       	out	0x2d, r1	; 45
 6e2:	1c bc       	out	0x2c, r1	; 44
	
		sec_one++; 
 6e4:	80 91 a7 00 	lds	r24, 0x00A7
 6e8:	8f 5f       	subi	r24, 0xFF	; 255
 6ea:	80 93 a7 00 	sts	0x00A7, r24
		msec = 0; 
 6ee:	10 92 a9 00 	sts	0x00A9, r1
 6f2:	10 92 a8 00 	sts	0x00A8, r1
		if (sec_one == 10){
 6f6:	8a 30       	cpi	r24, 0x0A	; 10
 6f8:	39 f4       	brne	.+14     	; 0x708 <__vector_6+0xb4>
			sec_ten++; 
 6fa:	80 91 ab 00 	lds	r24, 0x00AB
 6fe:	8f 5f       	subi	r24, 0xFF	; 255
 700:	80 93 ab 00 	sts	0x00AB, r24
			sec_one=0;
 704:	10 92 a7 00 	sts	0x00A7, r1
		}
		
		if (sec_ten == 6) {min_one++; sec_ten=0;}
 708:	80 91 ab 00 	lds	r24, 0x00AB
 70c:	86 30       	cpi	r24, 0x06	; 6
 70e:	39 f4       	brne	.+14     	; 0x71e <__vector_6+0xca>
 710:	80 91 ad 00 	lds	r24, 0x00AD
 714:	8f 5f       	subi	r24, 0xFF	; 255
 716:	80 93 ad 00 	sts	0x00AD, r24
 71a:	10 92 ab 00 	sts	0x00AB, r1
		if (min_one == 10) {min_ten++; min_one=0;}
 71e:	80 91 ad 00 	lds	r24, 0x00AD
 722:	8a 30       	cpi	r24, 0x0A	; 10
 724:	39 f4       	brne	.+14     	; 0x734 <__vector_6+0xe0>
 726:	80 91 aa 00 	lds	r24, 0x00AA
 72a:	8f 5f       	subi	r24, 0xFF	; 255
 72c:	80 93 aa 00 	sts	0x00AA, r24
 730:	10 92 ad 00 	sts	0x00AD, r1
		if (min_ten == 6) {hour_one++; min_ten=0;}
 734:	80 91 aa 00 	lds	r24, 0x00AA
 738:	86 30       	cpi	r24, 0x06	; 6
 73a:	39 f4       	brne	.+14     	; 0x74a <__vector_6+0xf6>
 73c:	80 91 ae 00 	lds	r24, 0x00AE
 740:	8f 5f       	subi	r24, 0xFF	; 255
 742:	80 93 ae 00 	sts	0x00AE, r24
 746:	10 92 aa 00 	sts	0x00AA, r1
		if (hour_one == 10) {hour_ten++; hour_one=0;}
 74a:	80 91 ae 00 	lds	r24, 0x00AE
 74e:	8a 30       	cpi	r24, 0x0A	; 10
 750:	39 f4       	brne	.+14     	; 0x760 <__vector_6+0x10c>
 752:	80 91 ac 00 	lds	r24, 0x00AC
 756:	8f 5f       	subi	r24, 0xFF	; 255
 758:	80 93 ac 00 	sts	0x00AC, r24
 75c:	10 92 ae 00 	sts	0x00AE, r1
		if ((hour_ten == 2) & (hour_one == 4)) {
 760:	80 91 ac 00 	lds	r24, 0x00AC
 764:	82 30       	cpi	r24, 0x02	; 2
 766:	41 f4       	brne	.+16     	; 0x778 <__vector_6+0x124>
 768:	80 91 ae 00 	lds	r24, 0x00AE
 76c:	84 30       	cpi	r24, 0x04	; 4
 76e:	21 f4       	brne	.+8      	; 0x778 <__vector_6+0x124>
			hour_ten = 0; 
 770:	10 92 ac 00 	sts	0x00AC, r1
			hour_one = 0;
 774:	10 92 ae 00 	sts	0x00AE, r1
		}
		update_lcd = 1; 
 778:	81 e0       	ldi	r24, 0x01	; 1
 77a:	80 93 a6 00 	sts	0x00A6, r24
	}
}
 77e:	ff 91       	pop	r31
 780:	ef 91       	pop	r30
 782:	bf 91       	pop	r27
 784:	af 91       	pop	r26
 786:	9f 91       	pop	r25
 788:	8f 91       	pop	r24
 78a:	7f 91       	pop	r23
 78c:	6f 91       	pop	r22
 78e:	5f 91       	pop	r21
 790:	4f 91       	pop	r20
 792:	3f 91       	pop	r19
 794:	2f 91       	pop	r18
 796:	0f 90       	pop	r0
 798:	0f be       	out	0x3f, r0	; 63
 79a:	0f 90       	pop	r0
 79c:	1f 90       	pop	r1
 79e:	18 95       	reti

000007a0 <lcd_putc>:
    }

	lcd_home();
}

void lcd_putc(char c){
 7a0:	1f 93       	push	r17
 7a2:	cf 93       	push	r28
 7a4:	df 93       	push	r29
	if((c > 127 || 
 7a6:	18 2f       	mov	r17, r24
 7a8:	10 52       	subi	r17, 0x20	; 32
 7aa:	10 36       	cpi	r17, 0x60	; 96
 7ac:	a0 f4       	brcc	.+40     	; 0x7d6 <lcd_putc+0x36>
		c != 'ß' &&
		c != 'Ü' &&
		c != 'Ö' &&
		c != 'Ä' ) ) return;
    
    lcd_send_i2c_start();
 7ae:	4b d2       	rcall	.+1174   	; 0xc46 <lcd_send_i2c_start>
    lcd_send_i2c_byte(0x40);	// 0x00 for command, 0x40 for data
 7b0:	80 e4       	ldi	r24, 0x40	; 64
 7b2:	59 d2       	rcall	.+1202   	; 0xc66 <lcd_send_i2c_byte>
				lcd_send_i2c_byte(pgm_read_byte(&ssd1306oled_font6x8[c * 6 + i]));	// print font to ram, print 6 columns
			}
			break;
		default:
                c -= 32;
                if( c < 127-32 ) {
 7b4:	1f 35       	cpi	r17, 0x5F	; 95
 7b6:	71 f0       	breq	.+28     	; 0x7d4 <lcd_putc+0x34>
 7b8:	86 e0       	ldi	r24, 0x06	; 6
 7ba:	18 9f       	mul	r17, r24
 7bc:	e0 01       	movw	r28, r0
 7be:	11 24       	eor	r1, r1
 7c0:	c6 5c       	subi	r28, 0xC6	; 198
 7c2:	df 4f       	sbci	r29, 0xFF	; 255
 7c4:	10 e0       	ldi	r17, 0x00	; 0
                    for (uint8_t i = 0; i < 6; i++)
                    {
                        lcd_send_i2c_byte(pgm_read_byte(&ssd1306oled_font6x8[c * 6 + i]));	// print font to ram, print 6 columns
 7c6:	fe 01       	movw	r30, r28
 7c8:	84 91       	lpm	r24, Z+
 7ca:	4d d2       	rcall	.+1178   	; 0xc66 <lcd_send_i2c_byte>
			}
			break;
		default:
                c -= 32;
                if( c < 127-32 ) {
                    for (uint8_t i = 0; i < 6; i++)
 7cc:	1f 5f       	subi	r17, 0xFF	; 255
 7ce:	21 96       	adiw	r28, 0x01	; 1
 7d0:	16 30       	cpi	r17, 0x06	; 6
 7d2:	c9 f7       	brne	.-14     	; 0x7c6 <lcd_putc+0x26>
                    }
                    //return;
                }
			break;
	}
    lcd_send_i2c_stop();
 7d4:	45 d2       	rcall	.+1162   	; 0xc60 <lcd_send_i2c_stop>
}
 7d6:	df 91       	pop	r29
 7d8:	cf 91       	pop	r28
 7da:	1f 91       	pop	r17
 7dc:	08 95       	ret

000007de <lcd_puts_p>:
void lcd_puts(const char* s){
    while (*s) {
        lcd_putc(*s++);
    }
}
void lcd_puts_p(const char* progmem_s){
 7de:	cf 93       	push	r28
 7e0:	df 93       	push	r29
 7e2:	ec 01       	movw	r28, r24
 7e4:	01 c0       	rjmp	.+2      	; 0x7e8 <lcd_puts_p+0xa>
    register uint8_t c;
    while ((c = pgm_read_byte(progmem_s++))) {
        lcd_putc(c);
 7e6:	dc df       	rcall	.-72     	; 0x7a0 <lcd_putc>
 7e8:	fe 01       	movw	r30, r28
        lcd_putc(*s++);
    }
}
void lcd_puts_p(const char* progmem_s){
    register uint8_t c;
    while ((c = pgm_read_byte(progmem_s++))) {
 7ea:	21 96       	adiw	r28, 0x01	; 1
 7ec:	84 91       	lpm	r24, Z+
 7ee:	88 23       	and	r24, r24
 7f0:	d1 f7       	brne	.-12     	; 0x7e6 <lcd_puts_p+0x8>
        lcd_putc(c);
    }
}
 7f2:	df 91       	pop	r29
 7f4:	cf 91       	pop	r28
 7f6:	08 95       	ret

000007f8 <lcd_puts>:
			break;
	}
    lcd_send_i2c_stop();
}

void lcd_puts(const char* s){
 7f8:	cf 93       	push	r28
 7fa:	df 93       	push	r29
 7fc:	ec 01       	movw	r28, r24
 7fe:	02 c0       	rjmp	.+4      	; 0x804 <lcd_puts+0xc>
    while (*s) {
        lcd_putc(*s++);
 800:	21 96       	adiw	r28, 0x01	; 1
 802:	ce df       	rcall	.-100    	; 0x7a0 <lcd_putc>
	}
    lcd_send_i2c_stop();
}

void lcd_puts(const char* s){
    while (*s) {
 804:	88 81       	ld	r24, Y
 806:	88 23       	and	r24, r24
 808:	d9 f7       	brne	.-10     	; 0x800 <lcd_puts+0x8>
        lcd_putc(*s++);
    }
}
 80a:	df 91       	pop	r29
 80c:	cf 91       	pop	r28
 80e:	08 95       	ret

00000810 <lcd_data>:
    for (uint8_t i=0; i<size; i++) {
        lcd_send_i2c_byte(cmd[i]);
    }
    lcd_send_i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
 810:	ef 92       	push	r14
 812:	ff 92       	push	r15
 814:	1f 93       	push	r17
 816:	cf 93       	push	r28
 818:	df 93       	push	r29
 81a:	7c 01       	movw	r14, r24
 81c:	eb 01       	movw	r28, r22
    lcd_send_i2c_start();
 81e:	13 d2       	rcall	.+1062   	; 0xc46 <lcd_send_i2c_start>
    lcd_send_i2c_byte(0x40);	// 0x00 for command, 0x40 for data
 820:	80 e4       	ldi	r24, 0x40	; 64
 822:	21 d2       	rcall	.+1090   	; 0xc66 <lcd_send_i2c_byte>
 824:	05 c0       	rjmp	.+10     	; 0x830 <lcd_data+0x20>
    for (uint8_t i; i<size; i++) {
        lcd_send_i2c_byte(data[i]);
 826:	ee 0d       	add	r30, r14
 828:	ff 1d       	adc	r31, r15
 82a:	80 81       	ld	r24, Z
 82c:	1c d2       	rcall	.+1080   	; 0xc66 <lcd_send_i2c_byte>
    lcd_send_i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
    lcd_send_i2c_start();
    lcd_send_i2c_byte(0x40);	// 0x00 for command, 0x40 for data
    for (uint8_t i; i<size; i++) {
 82e:	1f 5f       	subi	r17, 0xFF	; 255
 830:	e1 2f       	mov	r30, r17
 832:	f0 e0       	ldi	r31, 0x00	; 0
 834:	ec 17       	cp	r30, r28
 836:	fd 07       	cpc	r31, r29
 838:	b0 f3       	brcs	.-20     	; 0x826 <lcd_data+0x16>
        lcd_send_i2c_byte(data[i]);
    }
    lcd_send_i2c_stop();
 83a:	12 d2       	rcall	.+1060   	; 0xc60 <lcd_send_i2c_stop>
}
 83c:	df 91       	pop	r29
 83e:	cf 91       	pop	r28
 840:	1f 91       	pop	r17
 842:	ff 90       	pop	r15
 844:	ef 90       	pop	r14
 846:	08 95       	ret

00000848 <lcd_command>:

void lcd_home(void){
	lcd_gotoxy(0, 0);
}

void lcd_command(uint8_t cmd[], uint8_t size) {
 848:	ff 92       	push	r15
 84a:	0f 93       	push	r16
 84c:	1f 93       	push	r17
 84e:	cf 93       	push	r28
 850:	df 93       	push	r29
 852:	18 2f       	mov	r17, r24
 854:	09 2f       	mov	r16, r25
 856:	f6 2e       	mov	r15, r22
    lcd_send_i2c_start();
 858:	f6 d1       	rcall	.+1004   	; 0xc46 <lcd_send_i2c_start>
    lcd_send_i2c_byte(0x00);	// 0x00 for command, 0x40 for data
 85a:	80 e0       	ldi	r24, 0x00	; 0
 85c:	04 d2       	rcall	.+1032   	; 0xc66 <lcd_send_i2c_byte>
 85e:	21 2f       	mov	r18, r17
 860:	30 2f       	mov	r19, r16
 862:	c9 01       	movw	r24, r18
 864:	ec 01       	movw	r28, r24
 866:	10 e0       	ldi	r17, 0x00	; 0
 868:	03 c0       	rjmp	.+6      	; 0x870 <lcd_command+0x28>
    for (uint8_t i=0; i<size; i++) {
        lcd_send_i2c_byte(cmd[i]);
 86a:	89 91       	ld	r24, Y+
 86c:	fc d1       	rcall	.+1016   	; 0xc66 <lcd_send_i2c_byte>
}

void lcd_command(uint8_t cmd[], uint8_t size) {
    lcd_send_i2c_start();
    lcd_send_i2c_byte(0x00);	// 0x00 for command, 0x40 for data
    for (uint8_t i=0; i<size; i++) {
 86e:	1f 5f       	subi	r17, 0xFF	; 255
 870:	1f 15       	cp	r17, r15
 872:	d8 f3       	brcs	.-10     	; 0x86a <lcd_command+0x22>
        lcd_send_i2c_byte(cmd[i]);
    }
    lcd_send_i2c_stop();
 874:	f5 d1       	rcall	.+1002   	; 0xc60 <lcd_send_i2c_stop>
}
 876:	df 91       	pop	r29
 878:	cf 91       	pop	r28
 87a:	1f 91       	pop	r17
 87c:	0f 91       	pop	r16
 87e:	ff 90       	pop	r15
 880:	08 95       	ret

00000882 <lcd_set_contrast>:
        commandSequence[0] = 0xA7;
    }
    lcd_command(commandSequence, 1);
}

void lcd_set_contrast(uint8_t contrast){
 882:	df 93       	push	r29
 884:	cf 93       	push	r28
 886:	00 d0       	rcall	.+0      	; 0x888 <lcd_set_contrast+0x6>
 888:	cd b7       	in	r28, 0x3d	; 61
 88a:	de b7       	in	r29, 0x3e	; 62
    uint8_t commandSequence[2] = {0x81, contrast};
 88c:	91 e8       	ldi	r25, 0x81	; 129
 88e:	99 83       	std	Y+1, r25	; 0x01
 890:	8a 83       	std	Y+2, r24	; 0x02
    lcd_command(commandSequence, sizeof(commandSequence));
 892:	ce 01       	movw	r24, r28
 894:	01 96       	adiw	r24, 0x01	; 1
 896:	62 e0       	ldi	r22, 0x02	; 2
 898:	d7 df       	rcall	.-82     	; 0x848 <lcd_command>
}
 89a:	0f 90       	pop	r0
 89c:	0f 90       	pop	r0
 89e:	cf 91       	pop	r28
 8a0:	df 91       	pop	r29
 8a2:	08 95       	ret

000008a4 <lcd_invert>:
    while ((c = pgm_read_byte(progmem_s++))) {
        lcd_putc(c);
    }
}

void lcd_invert(uint8_t invert){
 8a4:	1f 93       	push	r17
 8a6:	df 93       	push	r29
 8a8:	cf 93       	push	r28
 8aa:	0f 92       	push	r0
 8ac:	cd b7       	in	r28, 0x3d	; 61
 8ae:	de b7       	in	r29, 0x3e	; 62
    lcd_send_i2c_start();
 8b0:	ca d1       	rcall	.+916    	; 0xc46 <lcd_send_i2c_start>
    uint8_t commandSequence[1];
    if (invert == YES) {
        commandSequence[0] = 0xA7;
    } else {
        commandSequence[0] = 0xA7;
 8b2:	87 ea       	ldi	r24, 0xA7	; 167
 8b4:	89 83       	std	Y+1, r24	; 0x01
    }
    lcd_command(commandSequence, 1);
 8b6:	ce 01       	movw	r24, r28
 8b8:	01 96       	adiw	r24, 0x01	; 1
 8ba:	61 e0       	ldi	r22, 0x01	; 1
 8bc:	c5 df       	rcall	.-118    	; 0x848 <lcd_command>
}
 8be:	0f 90       	pop	r0
 8c0:	cf 91       	pop	r28
 8c2:	df 91       	pop	r29
 8c4:	1f 91       	pop	r17
 8c6:	08 95       	ret

000008c8 <lcd_gotoxy>:
    for (uint8_t i; i<size; i++) {
        lcd_send_i2c_byte(data[i]);
    }
    lcd_send_i2c_stop();
}
void lcd_gotoxy(uint8_t x, uint8_t y){
 8c8:	df 93       	push	r29
 8ca:	cf 93       	push	r28
 8cc:	00 d0       	rcall	.+0      	; 0x8ce <lcd_gotoxy+0x6>
 8ce:	00 d0       	rcall	.+0      	; 0x8d0 <lcd_gotoxy+0x8>
 8d0:	cd b7       	in	r28, 0x3d	; 61
 8d2:	de b7       	in	r29, 0x3e	; 62
 8d4:	98 2f       	mov	r25, r24
    if( x > (DISPLAY_WIDTH) || y > (DISPLAY_HEIGHT/8-1)) return;// out of display
 8d6:	81 38       	cpi	r24, 0x81	; 129
 8d8:	68 f4       	brcc	.+26     	; 0x8f4 <lcd_gotoxy+0x2c>
 8da:	68 30       	cpi	r22, 0x08	; 8
 8dc:	58 f4       	brcc	.+22     	; 0x8f4 <lcd_gotoxy+0x2c>
    //x = x * 8;					// one char: 6 pixel width
#if defined SSD1306
    uint8_t commandSequence[] = {0xb0+y, 0x21, x, 0x7f};
 8de:	60 55       	subi	r22, 0x50	; 80
 8e0:	69 83       	std	Y+1, r22	; 0x01
 8e2:	81 e2       	ldi	r24, 0x21	; 33
 8e4:	8a 83       	std	Y+2, r24	; 0x02
 8e6:	9b 83       	std	Y+3, r25	; 0x03
 8e8:	8f e7       	ldi	r24, 0x7F	; 127
 8ea:	8c 83       	std	Y+4, r24	; 0x04
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
 8ec:	ce 01       	movw	r24, r28
 8ee:	01 96       	adiw	r24, 0x01	; 1
 8f0:	64 e0       	ldi	r22, 0x04	; 4
 8f2:	aa df       	rcall	.-172    	; 0x848 <lcd_command>
}
 8f4:	0f 90       	pop	r0
 8f6:	0f 90       	pop	r0
 8f8:	0f 90       	pop	r0
 8fa:	0f 90       	pop	r0
 8fc:	cf 91       	pop	r28
 8fe:	df 91       	pop	r29
 900:	08 95       	ret

00000902 <lcd_home>:
    lcd_command(commandSequence, sizeof(commandSequence));
    lcd_clrscr();
}

void lcd_home(void){
	lcd_gotoxy(0, 0);
 902:	80 e0       	ldi	r24, 0x00	; 0
 904:	60 e0       	ldi	r22, 0x00	; 0
 906:	e0 df       	rcall	.-64     	; 0x8c8 <lcd_gotoxy>
}
 908:	08 95       	ret

0000090a <lcd_clrscr>:
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_clrscr(void){
 90a:	cf 93       	push	r28
 90c:	df 93       	push	r29
    lcd_home();
 90e:	f9 df       	rcall	.-14     	; 0x902 <lcd_home>
 910:	c0 e0       	ldi	r28, 0x00	; 0
 912:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint16_t i = 0; i < DISPLAYSIZE; i++) {
        lcd_data(0x01, 1);
 914:	81 e0       	ldi	r24, 0x01	; 1
 916:	90 e0       	ldi	r25, 0x00	; 0
 918:	61 e0       	ldi	r22, 0x01	; 1
 91a:	70 e0       	ldi	r23, 0x00	; 0
 91c:	79 df       	rcall	.-270    	; 0x810 <lcd_data>
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_clrscr(void){
    lcd_home();
    for (uint16_t i = 0; i < DISPLAYSIZE; i++) {
 91e:	21 96       	adiw	r28, 0x01	; 1
 920:	84 e0       	ldi	r24, 0x04	; 4
 922:	c0 30       	cpi	r28, 0x00	; 0
 924:	d8 07       	cpc	r29, r24
 926:	b1 f7       	brne	.-20     	; 0x914 <lcd_clrscr+0xa>
        lcd_data(0x01, 1);
    }

	lcd_home();
 928:	ec df       	rcall	.-40     	; 0x902 <lcd_home>
}
 92a:	df 91       	pop	r29
 92c:	cf 91       	pop	r28
 92e:	08 95       	ret

00000930 <lcd_clear_bigc>:
		lcd_send_i2c_stop();		
    }
}


void lcd_clear_bigc(uint8_t column, uint8_t char_height){
 930:	ef 92       	push	r14
 932:	ff 92       	push	r15
 934:	0f 93       	push	r16
 936:	1f 93       	push	r17
 938:	e8 2e       	mov	r14, r24
 93a:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < (char_height >> 3) ; i++) {
 93c:	f6 94       	lsr	r15
 93e:	f6 94       	lsr	r15
 940:	f6 94       	lsr	r15
 942:	00 e0       	ldi	r16, 0x00	; 0
 944:	0e c0       	rjmp	.+28     	; 0x962 <lcd_clear_bigc+0x32>
		lcd_gotoxy(column, 1+i); 
 946:	0f 5f       	subi	r16, 0xFF	; 255
 948:	8e 2d       	mov	r24, r14
 94a:	60 2f       	mov	r22, r16
 94c:	bd df       	rcall	.-134    	; 0x8c8 <lcd_gotoxy>
		lcd_send_i2c_start();
 94e:	7b d1       	rcall	.+758    	; 0xc46 <lcd_send_i2c_start>
    	lcd_send_i2c_byte(0x40);
 950:	80 e4       	ldi	r24, 0x40	; 64
 952:	89 d1       	rcall	.+786    	; 0xc66 <lcd_send_i2c_byte>
 954:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t j = 0; j < 18; j++)
			{
   			lcd_send_i2c_byte(0x00); 
 956:	80 e0       	ldi	r24, 0x00	; 0
 958:	86 d1       	rcall	.+780    	; 0xc66 <lcd_send_i2c_byte>
void lcd_clear_bigc(uint8_t column, uint8_t char_height){
	for (uint8_t i = 0; i < (char_height >> 3) ; i++) {
		lcd_gotoxy(column, 1+i); 
		lcd_send_i2c_start();
    	lcd_send_i2c_byte(0x40);
		for (uint8_t j = 0; j < 18; j++)
 95a:	1f 5f       	subi	r17, 0xFF	; 255
 95c:	12 31       	cpi	r17, 0x12	; 18
 95e:	d9 f7       	brne	.-10     	; 0x956 <lcd_clear_bigc+0x26>
			{
   			lcd_send_i2c_byte(0x00); 
			}
		lcd_send_i2c_stop();
 960:	7f d1       	rcall	.+766    	; 0xc60 <lcd_send_i2c_stop>
    }
}


void lcd_clear_bigc(uint8_t column, uint8_t char_height){
	for (uint8_t i = 0; i < (char_height >> 3) ; i++) {
 962:	0f 15       	cp	r16, r15
 964:	80 f3       	brcs	.-32     	; 0x946 <lcd_clear_bigc+0x16>
   			lcd_send_i2c_byte(0x00); 
			}
		lcd_send_i2c_stop();
		
    }
}
 966:	1f 91       	pop	r17
 968:	0f 91       	pop	r16
 96a:	ff 90       	pop	r15
 96c:	ef 90       	pop	r14
 96e:	08 95       	ret

00000970 <lcd_put_bigc>:
void lcd_set_contrast(uint8_t contrast){
    uint8_t commandSequence[2] = {0x81, contrast};
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
 970:	6f 92       	push	r6
 972:	7f 92       	push	r7
 974:	8f 92       	push	r8
 976:	9f 92       	push	r9
 978:	af 92       	push	r10
 97a:	bf 92       	push	r11
 97c:	cf 92       	push	r12
 97e:	df 92       	push	r13
 980:	ef 92       	push	r14
 982:	ff 92       	push	r15
 984:	0f 93       	push	r16
 986:	1f 93       	push	r17
 988:	cf 93       	push	r28
 98a:	df 93       	push	r29
 98c:	66 2e       	mov	r6, r22
 98e:	72 2e       	mov	r7, r18
 990:	b0 2e       	mov	r11, r16
	uint8_t x_offset = ((general_width - char_width)>>1); 
 992:	c4 2e       	mov	r12, r20
 994:	dd 24       	eor	r13, r13
 996:	30 e0       	ldi	r19, 0x00	; 0
 998:	2c 19       	sub	r18, r12
 99a:	3d 09       	sbc	r19, r13
 99c:	35 95       	asr	r19
 99e:	27 95       	ror	r18
 9a0:	a2 2e       	mov	r10, r18

	for (uint8_t i = 0; i < (char_height >> 3); i++) {
 9a2:	b6 94       	lsr	r11
 9a4:	b6 94       	lsr	r11
 9a6:	b6 94       	lsr	r11
void lcd_set_contrast(uint8_t contrast){
    uint8_t commandSequence[2] = {0x81, contrast};
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
 9a8:	30 e0       	ldi	r19, 0x00	; 0
 9aa:	7c 01       	movw	r14, r24
 9ac:	e2 1a       	sub	r14, r18
 9ae:	f3 0a       	sbc	r15, r19
 9b0:	00 e0       	ldi	r16, 0x00	; 0
		for (uint8_t j = 0; j < general_width; j++)
			if(j < x_offset) {
				lcd_send_i2c_byte(0x00);
				}
			else {
				if(j < (x_offset + char_width)) {
 9b2:	49 01       	movw	r8, r18
 9b4:	8c 0c       	add	r8, r12
 9b6:	9d 1c       	adc	r9, r13
 9b8:	1d c0       	rjmp	.+58     	; 0x9f4 <lcd_put_bigc+0x84>

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
	uint8_t x_offset = ((general_width - char_width)>>1); 

	for (uint8_t i = 0; i < (char_height >> 3); i++) {
		lcd_gotoxy(column, 1+i); 
 9ba:	0f 5f       	subi	r16, 0xFF	; 255
 9bc:	86 2d       	mov	r24, r6
 9be:	60 2f       	mov	r22, r16
 9c0:	83 df       	rcall	.-250    	; 0x8c8 <lcd_gotoxy>
		lcd_send_i2c_start();
 9c2:	41 d1       	rcall	.+642    	; 0xc46 <lcd_send_i2c_start>
    	lcd_send_i2c_byte(0x40);
 9c4:	80 e4       	ldi	r24, 0x40	; 64
 9c6:	4f d1       	rcall	.+670    	; 0xc66 <lcd_send_i2c_byte>
 9c8:	e7 01       	movw	r28, r14
 9ca:	10 e0       	ldi	r17, 0x00	; 0
 9cc:	0e c0       	rjmp	.+28     	; 0x9ea <lcd_put_bigc+0x7a>
	
		for (uint8_t j = 0; j < general_width; j++)
			if(j < x_offset) {
 9ce:	1a 15       	cp	r17, r10
 9d0:	40 f0       	brcs	.+16     	; 0x9e2 <lcd_put_bigc+0x72>
				lcd_send_i2c_byte(0x00);
				}
			else {
				if(j < (x_offset + char_width)) {
 9d2:	81 2f       	mov	r24, r17
 9d4:	90 e0       	ldi	r25, 0x00	; 0
 9d6:	88 15       	cp	r24, r8
 9d8:	99 05       	cpc	r25, r9
 9da:	1c f4       	brge	.+6      	; 0x9e2 <lcd_put_bigc+0x72>
		   			lcd_send_i2c_byte(pgm_read_byte(&addr[j-x_offset+char_width*i])); 
 9dc:	fe 01       	movw	r30, r28
 9de:	84 91       	lpm	r24, Z+
 9e0:	01 c0       	rjmp	.+2      	; 0x9e4 <lcd_put_bigc+0x74>
					}
				else {
					lcd_send_i2c_byte(0x00);
 9e2:	80 e0       	ldi	r24, 0x00	; 0
 9e4:	40 d1       	rcall	.+640    	; 0xc66 <lcd_send_i2c_byte>
	for (uint8_t i = 0; i < (char_height >> 3); i++) {
		lcd_gotoxy(column, 1+i); 
		lcd_send_i2c_start();
    	lcd_send_i2c_byte(0x40);
	
		for (uint8_t j = 0; j < general_width; j++)
 9e6:	1f 5f       	subi	r17, 0xFF	; 255
 9e8:	21 96       	adiw	r28, 0x01	; 1
 9ea:	17 15       	cp	r17, r7
 9ec:	80 f3       	brcs	.-32     	; 0x9ce <lcd_put_bigc+0x5e>
				else {
					lcd_send_i2c_byte(0x00);
					}
				}		

		lcd_send_i2c_stop();		
 9ee:	38 d1       	rcall	.+624    	; 0xc60 <lcd_send_i2c_stop>
 9f0:	ec 0c       	add	r14, r12
 9f2:	fd 1c       	adc	r15, r13
}

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
	uint8_t x_offset = ((general_width - char_width)>>1); 

	for (uint8_t i = 0; i < (char_height >> 3); i++) {
 9f4:	0b 15       	cp	r16, r11
 9f6:	08 f3       	brcs	.-62     	; 0x9ba <lcd_put_bigc+0x4a>
					}
				}		

		lcd_send_i2c_stop();		
    }
}
 9f8:	df 91       	pop	r29
 9fa:	cf 91       	pop	r28
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	ff 90       	pop	r15
 a02:	ef 90       	pop	r14
 a04:	df 90       	pop	r13
 a06:	cf 90       	pop	r12
 a08:	bf 90       	pop	r11
 a0a:	af 90       	pop	r10
 a0c:	9f 90       	pop	r9
 a0e:	8f 90       	pop	r8
 a10:	7f 90       	pop	r7
 a12:	6f 90       	pop	r6
 a14:	08 95       	ret

00000a16 <lcd_update_4>:
	lcd_put_bigc (bitmap_addr[c0], 103, char_width[c0], CHAR_WIDTH, CHAR_HEIGHT);

}


void lcd_update_4(uint8_t c3, uint8_t c2, uint8_t c1, uint8_t c0){
 a16:	af 92       	push	r10
 a18:	bf 92       	push	r11
 a1a:	cf 92       	push	r12
 a1c:	df 92       	push	r13
 a1e:	ef 92       	push	r14
 a20:	ff 92       	push	r15
 a22:	0f 93       	push	r16
 a24:	1f 93       	push	r17
 a26:	e8 2e       	mov	r14, r24
 a28:	16 2f       	mov	r17, r22
 a2a:	b4 2e       	mov	r11, r20
 a2c:	a2 2e       	mov	r10, r18
	/*if(c3 == 0)
		lcd_clear_bigc(0); 
	else*/
	lcd_put_bigc(bitmap_colon, 48, char_width[10], CHAR_WIDTH, CHAR_HEIGHT);
 a2e:	86 e2       	ldi	r24, 0x26	; 38
 a30:	90 e0       	ldi	r25, 0x00	; 0
 a32:	60 e3       	ldi	r22, 0x30	; 48
 a34:	44 e0       	ldi	r20, 0x04	; 4
 a36:	2e e1       	ldi	r18, 0x1E	; 30
 a38:	08 e2       	ldi	r16, 0x28	; 40
 a3a:	9a df       	rcall	.-204    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c3], 0, char_width[c3], CHAR_WIDTH, CHAR_HEIGHT);
 a3c:	ae 2d       	mov	r26, r14
 a3e:	b0 e0       	ldi	r27, 0x00	; 0
 a40:	22 e9       	ldi	r18, 0x92	; 146
 a42:	c2 2e       	mov	r12, r18
 a44:	20 e0       	ldi	r18, 0x00	; 0
 a46:	d2 2e       	mov	r13, r18
 a48:	fd 01       	movw	r30, r26
 a4a:	ee 0f       	add	r30, r30
 a4c:	ff 1f       	adc	r31, r31
 a4e:	ec 0d       	add	r30, r12
 a50:	fd 1d       	adc	r31, r13
 a52:	87 e8       	ldi	r24, 0x87	; 135
 a54:	e8 2e       	mov	r14, r24
 a56:	80 e0       	ldi	r24, 0x00	; 0
 a58:	f8 2e       	mov	r15, r24
 a5a:	ae 0d       	add	r26, r14
 a5c:	bf 1d       	adc	r27, r15
 a5e:	80 81       	ld	r24, Z
 a60:	91 81       	ldd	r25, Z+1	; 0x01
 a62:	60 e0       	ldi	r22, 0x00	; 0
 a64:	4c 91       	ld	r20, X
 a66:	2e e1       	ldi	r18, 0x1E	; 30
 a68:	83 df       	rcall	.-250    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c2], 24, char_width[c2], CHAR_WIDTH, CHAR_HEIGHT);	
 a6a:	a1 2f       	mov	r26, r17
 a6c:	b0 e0       	ldi	r27, 0x00	; 0
 a6e:	fd 01       	movw	r30, r26
 a70:	ee 0f       	add	r30, r30
 a72:	ff 1f       	adc	r31, r31
 a74:	ec 0d       	add	r30, r12
 a76:	fd 1d       	adc	r31, r13
 a78:	ae 0d       	add	r26, r14
 a7a:	bf 1d       	adc	r27, r15
 a7c:	80 81       	ld	r24, Z
 a7e:	91 81       	ldd	r25, Z+1	; 0x01
 a80:	68 e1       	ldi	r22, 0x18	; 24
 a82:	4c 91       	ld	r20, X
 a84:	2e e1       	ldi	r18, 0x1E	; 30
 a86:	74 df       	rcall	.-280    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c1], 72, char_width[c1], CHAR_WIDTH, CHAR_HEIGHT);
 a88:	ab 2d       	mov	r26, r11
 a8a:	b0 e0       	ldi	r27, 0x00	; 0
 a8c:	fd 01       	movw	r30, r26
 a8e:	ee 0f       	add	r30, r30
 a90:	ff 1f       	adc	r31, r31
 a92:	ec 0d       	add	r30, r12
 a94:	fd 1d       	adc	r31, r13
 a96:	ae 0d       	add	r26, r14
 a98:	bf 1d       	adc	r27, r15
 a9a:	80 81       	ld	r24, Z
 a9c:	91 81       	ldd	r25, Z+1	; 0x01
 a9e:	68 e4       	ldi	r22, 0x48	; 72
 aa0:	4c 91       	ld	r20, X
 aa2:	2e e1       	ldi	r18, 0x1E	; 30
 aa4:	65 df       	rcall	.-310    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c0], 96, char_width[c0], CHAR_WIDTH, CHAR_HEIGHT);
 aa6:	bb 24       	eor	r11, r11
 aa8:	c5 01       	movw	r24, r10
 aaa:	88 0f       	add	r24, r24
 aac:	99 1f       	adc	r25, r25
 aae:	c8 0e       	add	r12, r24
 ab0:	d9 1e       	adc	r13, r25
 ab2:	ea 0c       	add	r14, r10
 ab4:	fb 1c       	adc	r15, r11
 ab6:	f6 01       	movw	r30, r12
 ab8:	80 81       	ld	r24, Z
 aba:	91 81       	ldd	r25, Z+1	; 0x01
 abc:	60 e6       	ldi	r22, 0x60	; 96
 abe:	f7 01       	movw	r30, r14
 ac0:	40 81       	ld	r20, Z
 ac2:	2e e1       	ldi	r18, 0x1E	; 30
 ac4:	55 df       	rcall	.-342    	; 0x970 <lcd_put_bigc>

}
 ac6:	1f 91       	pop	r17
 ac8:	0f 91       	pop	r16
 aca:	ff 90       	pop	r15
 acc:	ef 90       	pop	r14
 ace:	df 90       	pop	r13
 ad0:	cf 90       	pop	r12
 ad2:	bf 90       	pop	r11
 ad4:	af 90       	pop	r10
 ad6:	08 95       	ret

00000ad8 <lcd_update_6>:
		
    }
}


void lcd_update_6(uint8_t c5,uint8_t c4,uint8_t c3, uint8_t c2, uint8_t c1, uint8_t c0){
 ad8:	cf 92       	push	r12
 ada:	df 92       	push	r13
 adc:	ef 92       	push	r14
 ade:	ff 92       	push	r15
 ae0:	0f 93       	push	r16
 ae2:	1f 93       	push	r17
 ae4:	16 2f       	mov	r17, r22
 ae6:	f4 2e       	mov	r15, r20
 ae8:	d2 2e       	mov	r13, r18
 aea:	c0 2e       	mov	r12, r16
	if(c3 == 0)
 aec:	44 23       	and	r20, r20
 aee:	21 f4       	brne	.+8      	; 0xaf8 <lcd_update_6+0x20>
		lcd_clear_bigc(0, CHAR_HEIGHT); 
 af0:	80 e0       	ldi	r24, 0x00	; 0
 af2:	68 e2       	ldi	r22, 0x28	; 40
 af4:	1d df       	rcall	.-454    	; 0x930 <lcd_clear_bigc>
 af6:	10 c0       	rjmp	.+32     	; 0xb18 <lcd_update_6+0x40>
	else
		lcd_put_bigc (bitmap_addr[c5], 0, char_width[c5], CHAR_WIDTH, CHAR_HEIGHT);
 af8:	a8 2f       	mov	r26, r24
 afa:	b0 e0       	ldi	r27, 0x00	; 0
 afc:	fd 01       	movw	r30, r26
 afe:	ee 0f       	add	r30, r30
 b00:	ff 1f       	adc	r31, r31
 b02:	ee 56       	subi	r30, 0x6E	; 110
 b04:	ff 4f       	sbci	r31, 0xFF	; 255
 b06:	a9 57       	subi	r26, 0x79	; 121
 b08:	bf 4f       	sbci	r27, 0xFF	; 255
 b0a:	80 81       	ld	r24, Z
 b0c:	91 81       	ldd	r25, Z+1	; 0x01
 b0e:	60 e0       	ldi	r22, 0x00	; 0
 b10:	4c 91       	ld	r20, X
 b12:	2e e1       	ldi	r18, 0x1E	; 30
 b14:	08 e2       	ldi	r16, 0x28	; 40
 b16:	2c df       	rcall	.-424    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c4], 18, char_width[c4], CHAR_WIDTH, CHAR_HEIGHT);	
 b18:	a1 2f       	mov	r26, r17
 b1a:	b0 e0       	ldi	r27, 0x00	; 0
 b1c:	fd 01       	movw	r30, r26
 b1e:	ee 0f       	add	r30, r30
 b20:	ff 1f       	adc	r31, r31
 b22:	ee 56       	subi	r30, 0x6E	; 110
 b24:	ff 4f       	sbci	r31, 0xFF	; 255
 b26:	a9 57       	subi	r26, 0x79	; 121
 b28:	bf 4f       	sbci	r27, 0xFF	; 255
 b2a:	80 81       	ld	r24, Z
 b2c:	91 81       	ldd	r25, Z+1	; 0x01
 b2e:	62 e1       	ldi	r22, 0x12	; 18
 b30:	4c 91       	ld	r20, X
 b32:	2e e1       	ldi	r18, 0x1E	; 30
 b34:	08 e2       	ldi	r16, 0x28	; 40
 b36:	1c df       	rcall	.-456    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_colon, 42, char_width[10], CHAR_WIDTH, CHAR_HEIGHT);
 b38:	86 e2       	ldi	r24, 0x26	; 38
 b3a:	90 e0       	ldi	r25, 0x00	; 0
 b3c:	6a e2       	ldi	r22, 0x2A	; 42
 b3e:	44 e0       	ldi	r20, 0x04	; 4
 b40:	2e e1       	ldi	r18, 0x1E	; 30
 b42:	16 df       	rcall	.-468    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c3], 42, char_width[c3], CHAR_WIDTH, CHAR_HEIGHT);
 b44:	af 2d       	mov	r26, r15
 b46:	b0 e0       	ldi	r27, 0x00	; 0
 b48:	fd 01       	movw	r30, r26
 b4a:	ee 0f       	add	r30, r30
 b4c:	ff 1f       	adc	r31, r31
 b4e:	ee 56       	subi	r30, 0x6E	; 110
 b50:	ff 4f       	sbci	r31, 0xFF	; 255
 b52:	a9 57       	subi	r26, 0x79	; 121
 b54:	bf 4f       	sbci	r27, 0xFF	; 255
 b56:	80 81       	ld	r24, Z
 b58:	91 81       	ldd	r25, Z+1	; 0x01
 b5a:	6a e2       	ldi	r22, 0x2A	; 42
 b5c:	4c 91       	ld	r20, X
 b5e:	2e e1       	ldi	r18, 0x1E	; 30
 b60:	07 df       	rcall	.-498    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c2], 60, char_width[c2], CHAR_WIDTH, CHAR_HEIGHT);
 b62:	ad 2d       	mov	r26, r13
 b64:	b0 e0       	ldi	r27, 0x00	; 0
 b66:	fd 01       	movw	r30, r26
 b68:	ee 0f       	add	r30, r30
 b6a:	ff 1f       	adc	r31, r31
 b6c:	ee 56       	subi	r30, 0x6E	; 110
 b6e:	ff 4f       	sbci	r31, 0xFF	; 255
 b70:	a9 57       	subi	r26, 0x79	; 121
 b72:	bf 4f       	sbci	r27, 0xFF	; 255
 b74:	80 81       	ld	r24, Z
 b76:	91 81       	ldd	r25, Z+1	; 0x01
 b78:	6c e3       	ldi	r22, 0x3C	; 60
 b7a:	4c 91       	ld	r20, X
 b7c:	2e e1       	ldi	r18, 0x1E	; 30
 b7e:	f8 de       	rcall	.-528    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_colon, 78, char_width[10], CHAR_WIDTH, CHAR_HEIGHT);
 b80:	86 e2       	ldi	r24, 0x26	; 38
 b82:	90 e0       	ldi	r25, 0x00	; 0
 b84:	6e e4       	ldi	r22, 0x4E	; 78
 b86:	44 e0       	ldi	r20, 0x04	; 4
 b88:	2e e1       	ldi	r18, 0x1E	; 30
 b8a:	f2 de       	rcall	.-540    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c1], 85, char_width[c1], CHAR_WIDTH, CHAR_HEIGHT);
 b8c:	ac 2d       	mov	r26, r12
 b8e:	b0 e0       	ldi	r27, 0x00	; 0
 b90:	fd 01       	movw	r30, r26
 b92:	ee 0f       	add	r30, r30
 b94:	ff 1f       	adc	r31, r31
 b96:	ee 56       	subi	r30, 0x6E	; 110
 b98:	ff 4f       	sbci	r31, 0xFF	; 255
 b9a:	a9 57       	subi	r26, 0x79	; 121
 b9c:	bf 4f       	sbci	r27, 0xFF	; 255
 b9e:	80 81       	ld	r24, Z
 ba0:	91 81       	ldd	r25, Z+1	; 0x01
 ba2:	65 e5       	ldi	r22, 0x55	; 85
 ba4:	4c 91       	ld	r20, X
 ba6:	2e e1       	ldi	r18, 0x1E	; 30
 ba8:	e3 de       	rcall	.-570    	; 0x970 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c0], 103, char_width[c0], CHAR_WIDTH, CHAR_HEIGHT);
 baa:	ae 2d       	mov	r26, r14
 bac:	b0 e0       	ldi	r27, 0x00	; 0
 bae:	fd 01       	movw	r30, r26
 bb0:	ee 0f       	add	r30, r30
 bb2:	ff 1f       	adc	r31, r31
 bb4:	ee 56       	subi	r30, 0x6E	; 110
 bb6:	ff 4f       	sbci	r31, 0xFF	; 255
 bb8:	a9 57       	subi	r26, 0x79	; 121
 bba:	bf 4f       	sbci	r27, 0xFF	; 255
 bbc:	80 81       	ld	r24, Z
 bbe:	91 81       	ldd	r25, Z+1	; 0x01
 bc0:	67 e6       	ldi	r22, 0x67	; 103
 bc2:	4c 91       	ld	r20, X
 bc4:	2e e1       	ldi	r18, 0x1E	; 30
 bc6:	d4 de       	rcall	.-600    	; 0x970 <lcd_put_bigc>

}
 bc8:	1f 91       	pop	r17
 bca:	0f 91       	pop	r16
 bcc:	ff 90       	pop	r15
 bce:	ef 90       	pop	r14
 bd0:	df 90       	pop	r13
 bd2:	cf 90       	pop	r12
 bd4:	08 95       	ret

00000bd6 <lcd_init>:
#include "./fonts/ascii_6x8.h"

#define CHAR_HEIGHT CHAR_HEIGHT_40
#define CHAR_WIDTH CHAR_WIDTH_40

void lcd_init(uint8_t dispAttr){
 bd6:	1f 93       	push	r17
 bd8:	df 93       	push	r29
 bda:	cf 93       	push	r28
 bdc:	cd b7       	in	r28, 0x3d	; 61
 bde:	de b7       	in	r29, 0x3e	; 62
 be0:	6c 97       	sbiw	r28, 0x1c	; 28
 be2:	0f b6       	in	r0, 0x3f	; 63
 be4:	f8 94       	cli
 be6:	de bf       	out	0x3e, r29	; 62
 be8:	0f be       	out	0x3f, r0	; 63
 bea:	cd bf       	out	0x3d, r28	; 61
 bec:	18 2f       	mov	r17, r24
    if(LCD_INIT_I2C == YES) i2c_init();
 bee:	1f d0       	rcall	.+62     	; 0xc2e <i2c_init>
 bf0:	20 e0       	ldi	r18, 0x00	; 0
 bf2:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
 bf4:	ce 01       	movw	r24, r28
 bf6:	01 96       	adiw	r24, 0x01	; 1
 bf8:	f9 01       	movw	r30, r18
 bfa:	ec 55       	subi	r30, 0x5C	; 92
 bfc:	fd 4f       	sbci	r31, 0xFD	; 253
 bfe:	e4 91       	lpm	r30, Z+
 c00:	dc 01       	movw	r26, r24
 c02:	a2 0f       	add	r26, r18
 c04:	b3 1f       	adc	r27, r19
 c06:	ec 93       	st	X, r30
 c08:	2f 5f       	subi	r18, 0xFF	; 255
 c0a:	3f 4f       	sbci	r19, 0xFF	; 255
#define CHAR_WIDTH CHAR_WIDTH_40

void lcd_init(uint8_t dispAttr){
    if(LCD_INIT_I2C == YES) i2c_init();
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
 c0c:	2b 31       	cpi	r18, 0x1B	; 27
 c0e:	31 05       	cpc	r19, r1
 c10:	99 f7       	brne	.-26     	; 0xbf8 <lcd_init+0x22>
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
 c12:	1c 8f       	std	Y+28, r17	; 0x1c
    lcd_command(commandSequence, sizeof(commandSequence));
 c14:	6c e1       	ldi	r22, 0x1C	; 28
 c16:	18 de       	rcall	.-976    	; 0x848 <lcd_command>
    lcd_clrscr();
 c18:	78 de       	rcall	.-784    	; 0x90a <lcd_clrscr>
}
 c1a:	6c 96       	adiw	r28, 0x1c	; 28
 c1c:	0f b6       	in	r0, 0x3f	; 63
 c1e:	f8 94       	cli
 c20:	de bf       	out	0x3e, r29	; 62
 c22:	0f be       	out	0x3f, r0	; 63
 c24:	cd bf       	out	0x3d, r28	; 61
 c26:	cf 91       	pop	r28
 c28:	df 91       	pop	r29
 c2a:	1f 91       	pop	r17
 c2c:	08 95       	ret

00000c2e <i2c_init>:
*/
#include "i2c.h"
#include <avr/interrupt.h>

void i2c_init(void){
	LCD_PORT |= (1 << SDA_Pin)|(1 << SDC_Pin);		// experimental, pullups for 12c_bus
 c2e:	85 b3       	in	r24, 0x15	; 21
 c30:	80 63       	ori	r24, 0x30	; 48
 c32:	85 bb       	out	0x15, r24	; 21
	LCD_PORT_DDR |= (1 << SDA_Pin)|(1 << SDC_Pin);
 c34:	84 b3       	in	r24, 0x14	; 20
 c36:	80 63       	ori	r24, 0x30	; 48
 c38:	84 bb       	out	0x14, r24	; 20
			break;
		case 64:
			TWSR = 0x3;
			break;
		default:
			TWSR = 0x00;
 c3a:	11 b8       	out	0x01, r1	; 1
			break;
	}
	TWBR = (uint8_t)SET_TWBR;
 c3c:	82 e0       	ldi	r24, 0x02	; 2
 c3e:	80 b9       	out	0x00, r24	; 0
	// enable
	TWCR = (1 << TWEN);
 c40:	84 e0       	ldi	r24, 0x04	; 4
 c42:	86 bf       	out	0x36, r24	; 54
}
 c44:	08 95       	ret

00000c46 <lcd_send_i2c_start>:
void lcd_send_i2c_start(void){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
 c46:	84 ea       	ldi	r24, 0xA4	; 164
 c48:	86 bf       	out	0x36, r24	; 54
    while((TWCR & (1 << TWINT)) == 0);
 c4a:	06 b6       	in	r0, 0x36	; 54
 c4c:	07 fe       	sbrs	r0, 7
 c4e:	fd cf       	rjmp	.-6      	; 0xc4a <lcd_send_i2c_start+0x4>
    // send adress
    TWDR = LCD_I2C_ADDR;
 c50:	88 e7       	ldi	r24, 0x78	; 120
 c52:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT)|( 1 << TWEN);
 c54:	84 e8       	ldi	r24, 0x84	; 132
 c56:	86 bf       	out	0x36, r24	; 54
    while((TWCR & (1 << TWINT)) == 0);
 c58:	06 b6       	in	r0, 0x36	; 54
 c5a:	07 fe       	sbrs	r0, 7
 c5c:	fd cf       	rjmp	.-6      	; 0xc58 <lcd_send_i2c_start+0x12>
}
 c5e:	08 95       	ret

00000c60 <lcd_send_i2c_stop>:
void lcd_send_i2c_stop(void){
    // i2c stop
    TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
 c60:	84 e9       	ldi	r24, 0x94	; 148
 c62:	86 bf       	out	0x36, r24	; 54
}
 c64:	08 95       	ret

00000c66 <lcd_send_i2c_byte>:
void lcd_send_i2c_byte(uint8_t byte){
    TWDR = byte;
 c66:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT)|( 1 << TWEN);
 c68:	84 e8       	ldi	r24, 0x84	; 132
 c6a:	86 bf       	out	0x36, r24	; 54
    while((TWCR & (1 << TWINT)) == 0);
 c6c:	06 b6       	in	r0, 0x36	; 54
 c6e:	07 fe       	sbrs	r0, 7
 c70:	fd cf       	rjmp	.-6      	; 0xc6c <lcd_send_i2c_byte+0x6>
 c72:	08 95       	ret

00000c74 <__eerd_byte_m8>:
 c74:	e1 99       	sbic	0x1c, 1	; 28
 c76:	fe cf       	rjmp	.-4      	; 0xc74 <__eerd_byte_m8>
 c78:	9f bb       	out	0x1f, r25	; 31
 c7a:	8e bb       	out	0x1e, r24	; 30
 c7c:	e0 9a       	sbi	0x1c, 0	; 28
 c7e:	99 27       	eor	r25, r25
 c80:	8d b3       	in	r24, 0x1d	; 29
 c82:	08 95       	ret

00000c84 <__eerd_word_m8>:
 c84:	a8 e1       	ldi	r26, 0x18	; 24
 c86:	b0 e0       	ldi	r27, 0x00	; 0
 c88:	42 e0       	ldi	r20, 0x02	; 2
 c8a:	50 e0       	ldi	r21, 0x00	; 0
 c8c:	02 c0       	rjmp	.+4      	; 0xc92 <__eerd_blraw_m8>

00000c8e <__eerd_block_m8>:
 c8e:	dc 01       	movw	r26, r24
 c90:	cb 01       	movw	r24, r22

00000c92 <__eerd_blraw_m8>:
 c92:	fc 01       	movw	r30, r24
 c94:	e1 99       	sbic	0x1c, 1	; 28
 c96:	fe cf       	rjmp	.-4      	; 0xc94 <__eerd_blraw_m8+0x2>
 c98:	06 c0       	rjmp	.+12     	; 0xca6 <__eerd_blraw_m8+0x14>
 c9a:	ff bb       	out	0x1f, r31	; 31
 c9c:	ee bb       	out	0x1e, r30	; 30
 c9e:	e0 9a       	sbi	0x1c, 0	; 28
 ca0:	31 96       	adiw	r30, 0x01	; 1
 ca2:	0d b2       	in	r0, 0x1d	; 29
 ca4:	0d 92       	st	X+, r0
 ca6:	41 50       	subi	r20, 0x01	; 1
 ca8:	50 40       	sbci	r21, 0x00	; 0
 caa:	b8 f7       	brcc	.-18     	; 0xc9a <__eerd_blraw_m8+0x8>
 cac:	08 95       	ret

00000cae <_exit>:
 cae:	f8 94       	cli

00000cb0 <__stop_program>:
 cb0:	ff cf       	rjmp	.-2      	; 0xcb0 <__stop_program>
