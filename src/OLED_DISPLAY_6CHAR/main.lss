
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000bf0  00000000  00000000  000000b4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000046  00800060  00000bf0  00000ca4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000009  008000a6  008000a6  00000cea  2**0
                  ALLOC
  3 .eeprom       0000000b  00810000  00810000  00000cea  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .debug_aranges 00000060  00000000  00000000  00000cf5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_pubnames 000002c8  00000000  00000000  00000d55  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000a9f  00000000  00000000  0000101d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000025d  00000000  00000000  00001abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000751  00000000  00000000  00001d19  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000180  00000000  00000000  0000246c  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000367  00000000  00000000  000025ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0000056b  00000000  00000000  00002953  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000018  00000000  00000000  00002ebe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4d c2       	rjmp	.+1178   	; 0x49c <__ctors_end>
   2:	67 c2       	rjmp	.+1230   	; 0x4d2 <__bad_interrupt>
   4:	66 c2       	rjmp	.+1228   	; 0x4d2 <__bad_interrupt>
   6:	65 c2       	rjmp	.+1226   	; 0x4d2 <__bad_interrupt>
   8:	64 c2       	rjmp	.+1224   	; 0x4d2 <__bad_interrupt>
   a:	63 c2       	rjmp	.+1222   	; 0x4d2 <__bad_interrupt>
   c:	b6 c2       	rjmp	.+1388   	; 0x57a <__vector_6>
   e:	61 c2       	rjmp	.+1218   	; 0x4d2 <__bad_interrupt>
  10:	60 c2       	rjmp	.+1216   	; 0x4d2 <__bad_interrupt>
  12:	5f c2       	rjmp	.+1214   	; 0x4d2 <__bad_interrupt>
  14:	5e c2       	rjmp	.+1212   	; 0x4d2 <__bad_interrupt>
  16:	5d c2       	rjmp	.+1210   	; 0x4d2 <__bad_interrupt>
  18:	5c c2       	rjmp	.+1208   	; 0x4d2 <__bad_interrupt>
  1a:	5b c2       	rjmp	.+1206   	; 0x4d2 <__bad_interrupt>
  1c:	5a c2       	rjmp	.+1204   	; 0x4d2 <__bad_interrupt>
  1e:	59 c2       	rjmp	.+1202   	; 0x4d2 <__bad_interrupt>
  20:	58 c2       	rjmp	.+1200   	; 0x4d2 <__bad_interrupt>
  22:	57 c2       	rjmp	.+1198   	; 0x4d2 <__bad_interrupt>
  24:	56 c2       	rjmp	.+1196   	; 0x4d2 <__bad_interrupt>

00000026 <bitmap_colon>:
  26:	00 00 00 00 00 80 80 00 00 30 30 00 00 00 00 00     .........00.....

00000036 <ssd1306oled_font6x8>:
  36:	00 00 00 00 00 00 00 00 00 2f 00 00 00 00 07 00     ........./......
  46:	07 00 00 14 7f 14 7f 14 00 24 2a 7f 2a 12 00 62     .........$*.*..b
  56:	64 08 13 23 00 36 49 55 22 50 00 00 05 03 00 00     d..#.6IU"P......
  66:	00 00 1c 22 41 00 00 00 41 22 1c 00 00 14 08 3e     ..."A...A".....>
  76:	08 14 00 08 08 3e 08 08 00 00 00 a0 60 00 00 08     .....>......`...
  86:	08 08 08 08 00 00 60 60 00 00 00 20 10 08 04 02     ......``... ....
  96:	00 3e 51 49 45 3e 00 00 42 7f 40 00 00 42 61 51     .>QIE>..B.@..BaQ
  a6:	49 46 00 21 41 45 4b 31 00 18 14 12 7f 10 00 27     IF.!AEK1.......'
  b6:	45 45 45 39 00 3c 4a 49 49 30 00 01 71 09 05 03     EEE9.<JII0..q...
  c6:	00 36 49 49 49 36 00 06 49 49 29 1e 00 00 36 36     .6III6..II)...66
  d6:	00 00 00 00 56 36 00 00 00 08 14 22 41 00 00 14     ....V6....."A...
  e6:	14 14 14 14 00 00 41 22 14 08 00 02 01 51 09 06     ......A".....Q..
  f6:	00 32 49 59 51 3e 00 7c 12 11 12 7c 00 7f 49 49     .2IYQ>.|...|..II
 106:	49 36 00 3e 41 41 41 22 00 7f 41 41 22 1c 00 7f     I6.>AAA"..AA"...
 116:	49 49 49 41 00 7f 09 09 09 01 00 3e 41 49 49 7a     IIIA.......>AIIz
 126:	00 7f 08 08 08 7f 00 00 41 7f 41 00 00 20 40 41     ........A.A.. @A
 136:	3f 01 00 7f 08 14 22 41 00 7f 40 40 40 40 00 7f     ?....."A..@@@@..
 146:	02 0c 02 7f 00 7f 04 08 10 7f 00 3e 41 41 41 3e     ...........>AAA>
 156:	00 7f 09 09 09 06 00 3e 41 51 21 5e 00 7f 09 19     .......>AQ!^....
 166:	29 46 00 46 49 49 49 31 00 01 01 7f 01 01 00 3f     )F.FIII1.......?
 176:	40 40 40 3f 00 1f 20 40 20 1f 00 3f 40 38 40 3f     @@@?.. @ ..?@8@?
 186:	00 63 14 08 14 63 00 07 08 70 08 07 00 61 51 49     .c...c...p...aQI
 196:	45 43 00 00 7f 41 41 00 00 55 2a 55 2a 55 00 00     EC...AA..U*U*U..
 1a6:	41 41 7f 00 00 04 02 01 02 04 00 40 40 40 40 40     AA.........@@@@@
 1b6:	00 00 01 02 04 00 00 20 54 54 54 78 00 7f 48 44     ....... TTTx..HD
 1c6:	44 38 00 38 44 44 44 20 00 38 44 44 48 7f 00 38     D8.8DDD .8DDH..8
 1d6:	54 54 54 18 00 08 7e 09 01 02 00 18 a4 a4 a4 7c     TTT...~........|
 1e6:	00 7f 08 04 04 78 00 00 44 7d 40 00 00 40 80 84     .....x..D}@..@..
 1f6:	7d 00 00 7f 10 28 44 00 00 00 41 7f 40 00 00 7c     }....(D...A.@..|
 206:	04 18 04 78 00 7c 08 04 04 78 00 38 44 44 44 38     ...x.|...x.8DDD8
 216:	00 fc 24 24 24 18 00 18 24 24 18 fc 00 7c 08 04     ..$$$...$$...|..
 226:	04 08 00 48 54 54 54 20 00 04 3f 44 40 20 00 3c     ...HTTT ..?D@ .<
 236:	40 40 20 7c 00 1c 20 40 20 1c 00 3c 40 30 40 3c     @@ |.. @ ..<@0@<
 246:	00 44 28 10 28 44 00 1c a0 a0 a0 7c 00 44 64 54     .D(.(D.....|.DdT
 256:	4c 44 00 00 08 77 41 00 00 00 00 63 00 00 00 00     LD...wA....c....
 266:	41 77 08 00 00 08 04 08 08 04 00 3d 40 40 20 7d     Aw.........=@@ }
 276:	00 3d 40 40 40 3d 00 21 54 54 54 79 00 7d 12 11     .=@@@=.!TTTy.}..
 286:	12 7d 00 39 44 44 44 39 00 3d 42 42 42 3d 00 02     .}.9DDD9.=BBB=..
 296:	05 02 00 00 00 7e 01 49 55 73                       .....~.IUs

000002a0 <init_sequence>:
 2a0:	ae 20 00 b0 c8 00 10 40 81 3f a1 a6 a8 3f a4 d3     . .....@.?...?..
 2b0:	00 d5 f0 d9 22 da 12 db 20 8d 14                    ...."... ..

000002bb <bitmap_0>:
 2bb:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 c0 e0     ................
 2cb:	30 10 10 10 30 e0 c0 00 00 1f 3f 60 c0 80 80 80     0...0.....?`....
 2db:	c0 f1 7f 1f 00 00 00 00 00 00 00 00 00 00 00 00     ................

000002eb <bitmap_1>:
 2eb:	00 00 00 00 00 00 00 00 00 00 00 00 80 c0 e0 f8     ................
 2fb:	ff 7f 00 02 07 03 01 e0 ff 7f 00 00 00 00 00 00     ................
 30b:	01 01 00 00                                         ....

0000030f <bitmap_2>:
 30f:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................
 31f:	00 30 38 1c 0c 04 04 0c fc f8 e0 00 00 70 f0 f0     .08..........p..
 32f:	f0 f0 e0 60 70 78 9f 8f 81 80 00 00 00 00 00 00     ...`px..........
 33f:	00 00 00 00 00 00 00 00                             ........

00000347 <bitmap_3>:
 347:	00 00 00 00 00 00 00 00 00 00 00 00 00 04 0e 02     ................
 357:	82 82 c2 e6 7c 38 00 00 00 30 70 60 c1 81 81 83     ....|8...0p`....
 367:	c7 7e 3c 00 00 00 00 00 00 00 00 00 00 00 00 00     .~<.............

00000377 <bitmap_4>:
 377:	00 00 00 00 00 00 00 00 00 00 00 00 00 f8 ff 0f     ................
 387:	01 00 00 00 80 e0 f0 20 00 01 03 06 04 04 06 06     ....... ........
 397:	03 ff ff 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000003a7 <bitmap_5>:
 3a7:	00 00 00 00 00 00 80 80 80 80 80 80 80 80 80 00     ................
 3b7:	00 00 00 00 20 7c 7f 67 60 60 e0 c0 c0 80 00 00     .... |.g``......
 3c7:	00 00 38 78 c0 c0 80 80 80 80 c0 e1 7f 3f 00 00     ..8x.........?..
 3d7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

000003e7 <bitmap_6>:
 3e7:	00 00 00 00 00 00 00 00 00 00 00 00 00 00 80 e0     ................
 3f7:	f8 9c 86 83 81 81 81 03 03 00 00 1f 7f 73 e1 c0     .............s..
 407:	c0 c0 c1 f3 7f 3e 00 00 00 00 00 00 00 00 00 00     .....>..........
 417:	00 00 00 00                                         ....

0000041b <bitmap_7>:
 41b:	00 00 00 00 00 00 00 00 00 00 00 00 00 04 04 04     ................
 42b:	04 04 04 fc fc 00 00 00 00 00 00 01 01 c1 ff ff     ................
 43b:	07 03 03 00 00 00 00 00 00 00 00 00 00 00 00 00     ................

0000044b <bitmap_8>:
 44b:	00 00 00 00 00 00 00 00 00 00 00 00 38 7c c6 82     ............8|..
 45b:	c2 e6 7e 1c 00 00 00 00 3c 7f e3 c1 83 86 fe 7c     ..~.....<......|
 46b:	00 00 00 00 00 00 00 00 00 00 00 00                 ............

00000477 <bitmap_9>:
 477:	00 00 00 00 00 00 00 00 00 00 7c fe c3 81 81 e3     ..........|.....
 487:	fe 3c 00 00 00 00 00 00 ff ff 00 00 00 00 00 00     .<..............
 497:	00 00 00 00 00                                      .....

0000049c <__ctors_end>:
 49c:	11 24       	eor	r1, r1
 49e:	1f be       	out	0x3f, r1	; 63
 4a0:	cf e5       	ldi	r28, 0x5F	; 95
 4a2:	d4 e0       	ldi	r29, 0x04	; 4
 4a4:	de bf       	out	0x3e, r29	; 62
 4a6:	cd bf       	out	0x3d, r28	; 61

000004a8 <__do_copy_data>:
 4a8:	10 e0       	ldi	r17, 0x00	; 0
 4aa:	a0 e6       	ldi	r26, 0x60	; 96
 4ac:	b0 e0       	ldi	r27, 0x00	; 0
 4ae:	e0 ef       	ldi	r30, 0xF0	; 240
 4b0:	fb e0       	ldi	r31, 0x0B	; 11
 4b2:	02 c0       	rjmp	.+4      	; 0x4b8 <.do_copy_data_start>

000004b4 <.do_copy_data_loop>:
 4b4:	05 90       	lpm	r0, Z+
 4b6:	0d 92       	st	X+, r0

000004b8 <.do_copy_data_start>:
 4b8:	a6 3a       	cpi	r26, 0xA6	; 166
 4ba:	b1 07       	cpc	r27, r17
 4bc:	d9 f7       	brne	.-10     	; 0x4b4 <.do_copy_data_loop>

000004be <__do_clear_bss>:
 4be:	10 e0       	ldi	r17, 0x00	; 0
 4c0:	a6 ea       	ldi	r26, 0xA6	; 166
 4c2:	b0 e0       	ldi	r27, 0x00	; 0
 4c4:	01 c0       	rjmp	.+2      	; 0x4c8 <.do_clear_bss_start>

000004c6 <.do_clear_bss_loop>:
 4c6:	1d 92       	st	X+, r1

000004c8 <.do_clear_bss_start>:
 4c8:	af 3a       	cpi	r26, 0xAF	; 175
 4ca:	b1 07       	cpc	r27, r17
 4cc:	e1 f7       	brne	.-8      	; 0x4c6 <.do_clear_bss_loop>
 4ce:	02 d0       	rcall	.+4      	; 0x4d4 <main>
 4d0:	8d c3       	rjmp	.+1818   	; 0xbec <_exit>

000004d2 <__bad_interrupt>:
 4d2:	96 cd       	rjmp	.-1236   	; 0x0 <__vectors>

000004d4 <main>:

// Main function
//  

int main (void)
{
 4d4:	df 92       	push	r13
 4d6:	ef 92       	push	r14
 4d8:	ff 92       	push	r15
 4da:	0f 93       	push	r16
 4dc:	1f 93       	push	r17
	/* Init OLED Display */
	
    lcd_init(LCD_DISP_ON);
 4de:	8f ea       	ldi	r24, 0xAF	; 175
 4e0:	19 d3       	rcall	.+1586   	; 0xb14 <lcd_init>
	lcd_clrscr();
 4e2:	ae d1       	rcall	.+860    	; 0x840 <lcd_clrscr>
        
     /* put string to display (line 7) with linefeed */
    
	lcd_gotoxy(0,7); 
 4e4:	80 e0       	ldi	r24, 0x00	; 0
 4e6:	67 e0       	ldi	r22, 0x07	; 7
 4e8:	8a d1       	rcall	.+788    	; 0x7fe <lcd_gotoxy>
	lcd_puts("OLED Clock                       ");
 4ea:	80 e6       	ldi	r24, 0x60	; 96
 4ec:	90 e0       	ldi	r25, 0x00	; 0
 4ee:	1f d1       	rcall	.+574    	; 0x72e <lcd_puts>
	lcd_home();
 4f0:	a3 d1       	rcall	.+838    	; 0x838 <lcd_home>
	lcd_set_contrast(196);
 4f2:	84 ec       	ldi	r24, 0xC4	; 196
 4f4:	61 d1       	rcall	.+706    	; 0x7b8 <lcd_set_contrast>

	/* Read Timer Calibration Values from EEPROM */

	timer_cal_div = eeprom_read_byte(&EE_timer_cal_div); 
 4f6:	80 e0       	ldi	r24, 0x00	; 0
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	5b d3       	rcall	.+1718   	; 0xbb2 <__eerd_byte_m8>
 4fc:	80 93 84 00 	sts	0x0084, r24
	timer_cal_val = eeprom_read_word(&EE_timer_cal_val);
 500:	81 e0       	ldi	r24, 0x01	; 1
 502:	90 e0       	ldi	r25, 0x00	; 0
 504:	5e d3       	rcall	.+1724   	; 0xbc2 <__eerd_word_m8>
 506:	90 93 83 00 	sts	0x0083, r25
 50a:	80 93 82 00 	sts	0x0082, r24
  	timer_reg_val = eeprom_read_word(&EE_timer_reg_val);
 50e:	83 e0       	ldi	r24, 0x03	; 3
 510:	90 e0       	ldi	r25, 0x00	; 0
 512:	57 d3       	rcall	.+1710   	; 0xbc2 <__eerd_word_m8>
 514:	90 93 86 00 	sts	0x0086, r25
 518:	80 93 85 00 	sts	0x0085, r24

	/* set Timer 1 for Clock Control */


	TCCR1B = ((1 << WGM12) | timer_reg_div);
 51c:	2d e0       	ldi	r18, 0x0D	; 13
 51e:	2e bd       	out	0x2e, r18	; 46
	OCR1A = timer_reg_val;
 520:	9b bd       	out	0x2b, r25	; 43
 522:	8a bd       	out	0x2a, r24	; 42


	/* Timer Interrupt Control*/
	TIMSK = (1 << OCIE1A); 
 524:	80 e1       	ldi	r24, 0x10	; 16
 526:	89 bf       	out	0x39, r24	; 57

	/* Global Interrupt Enable */ 
	sei();
 528:	78 94       	sei

	/* Initialize time variables */ 
	sec_one = eeprom_read_byte(&EE_init_sec_one);
 52a:	8a e0       	ldi	r24, 0x0A	; 10
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	41 d3       	rcall	.+1666   	; 0xbb2 <__eerd_byte_m8>
 530:	e8 2e       	mov	r14, r24
 532:	80 93 a7 00 	sts	0x00A7, r24
	sec_ten = eeprom_read_byte(&EE_init_sec_ten); 
 536:	89 e0       	ldi	r24, 0x09	; 9
 538:	90 e0       	ldi	r25, 0x00	; 0
 53a:	3b d3       	rcall	.+1654   	; 0xbb2 <__eerd_byte_m8>
 53c:	08 2f       	mov	r16, r24
 53e:	80 93 ab 00 	sts	0x00AB, r24

	min_one = eeprom_read_byte(&EE_init_min_one);
 542:	88 e0       	ldi	r24, 0x08	; 8
 544:	90 e0       	ldi	r25, 0x00	; 0
 546:	35 d3       	rcall	.+1642   	; 0xbb2 <__eerd_byte_m8>
 548:	d8 2e       	mov	r13, r24
 54a:	80 93 ad 00 	sts	0x00AD, r24
	min_ten = eeprom_read_byte(&EE_init_min_ten);
 54e:	87 e0       	ldi	r24, 0x07	; 7
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	2f d3       	rcall	.+1630   	; 0xbb2 <__eerd_byte_m8>
 554:	f8 2e       	mov	r15, r24
 556:	80 93 aa 00 	sts	0x00AA, r24

	hour_one = eeprom_read_byte(&EE_init_hour_one); 
 55a:	86 e0       	ldi	r24, 0x06	; 6
 55c:	90 e0       	ldi	r25, 0x00	; 0
 55e:	29 d3       	rcall	.+1618   	; 0xbb2 <__eerd_byte_m8>
 560:	18 2f       	mov	r17, r24
 562:	80 93 ae 00 	sts	0x00AE, r24
	hour_ten = eeprom_read_byte(&EE_init_hour_ten);
 566:	85 e0       	ldi	r24, 0x05	; 5
 568:	90 e0       	ldi	r25, 0x00	; 0
 56a:	23 d3       	rcall	.+1606   	; 0xbb2 <__eerd_byte_m8>
 56c:	80 93 ac 00 	sts	0x00AC, r24

	/* Update LCD Display */ 

	//lcd_update_4(min_ten, min_one, sec_ten, sec_one);  

	lcd_update_6(hour_ten, hour_one, min_ten, min_one, sec_ten, sec_one);  
 570:	61 2f       	mov	r22, r17
 572:	4f 2d       	mov	r20, r15
 574:	2d 2d       	mov	r18, r13
 576:	4b d2       	rcall	.+1174   	; 0xa0e <lcd_update_6>
 578:	ff cf       	rjmp	.-2      	; 0x578 <main+0xa4>

0000057a <__vector_6>:
uint8_t EEMEM EE_init_min_one = 9;
uint8_t EEMEM EE_init_sec_ten = 5; 
uint8_t EEMEM EE_init_sec_one = 0;

/* Timer Interrupt */
ISR(TIMER1_COMPA_vect){
 57a:	1f 92       	push	r1
 57c:	0f 92       	push	r0
 57e:	0f b6       	in	r0, 0x3f	; 63
 580:	0f 92       	push	r0
 582:	11 24       	eor	r1, r1
 584:	ef 92       	push	r14
 586:	0f 93       	push	r16
 588:	2f 93       	push	r18
 58a:	3f 93       	push	r19
 58c:	4f 93       	push	r20
 58e:	5f 93       	push	r21
 590:	6f 93       	push	r22
 592:	7f 93       	push	r23
 594:	8f 93       	push	r24
 596:	9f 93       	push	r25
 598:	af 93       	push	r26
 59a:	bf 93       	push	r27
 59c:	ef 93       	push	r30
 59e:	ff 93       	push	r31

	msec++;
 5a0:	80 91 a8 00 	lds	r24, 0x00A8
 5a4:	90 91 a9 00 	lds	r25, 0x00A9
 5a8:	01 96       	adiw	r24, 0x01	; 1
 5aa:	90 93 a9 00 	sts	0x00A9, r25
 5ae:	80 93 a8 00 	sts	0x00A8, r24

	if (msec == 4) {
 5b2:	04 97       	sbiw	r24, 0x04	; 4
 5b4:	f9 f4       	brne	.+62     	; 0x5f4 <__vector_6+0x7a>
		
		 OCR1A = timer_cal_val;  
 5b6:	80 91 82 00 	lds	r24, 0x0082
 5ba:	90 91 83 00 	lds	r25, 0x0083
 5be:	9b bd       	out	0x2b, r25	; 43
 5c0:	8a bd       	out	0x2a, r24	; 42
		 TCCR1B = ((1 << WGM12) | timer_cal_div);
 5c2:	80 91 84 00 	lds	r24, 0x0084
 5c6:	88 60       	ori	r24, 0x08	; 8
 5c8:	8e bd       	out	0x2e, r24	; 46
		 TCNT1 = 0; 
 5ca:	1d bc       	out	0x2d, r1	; 45
 5cc:	1c bc       	out	0x2c, r1	; 44
		 
		 if(update_lcd == 1){
 5ce:	80 91 a6 00 	lds	r24, 0x00A6
 5d2:	81 30       	cpi	r24, 0x01	; 1
 5d4:	79 f4       	brne	.+30     	; 0x5f4 <__vector_6+0x7a>
		 	lcd_update_6(hour_ten, hour_one, min_ten, min_one, sec_ten, sec_one); 
 5d6:	80 91 ac 00 	lds	r24, 0x00AC
 5da:	60 91 ae 00 	lds	r22, 0x00AE
 5de:	40 91 aa 00 	lds	r20, 0x00AA
 5e2:	20 91 ad 00 	lds	r18, 0x00AD
 5e6:	00 91 ab 00 	lds	r16, 0x00AB
 5ea:	e0 90 a7 00 	lds	r14, 0x00A7
 5ee:	0f d2       	rcall	.+1054   	; 0xa0e <lcd_update_6>
			update_lcd = 0; 
 5f0:	10 92 a6 00 	sts	0x00A6, r1
			}
	}	

	if (msec == 5){	
 5f4:	80 91 a8 00 	lds	r24, 0x00A8
 5f8:	90 91 a9 00 	lds	r25, 0x00A9
 5fc:	05 97       	sbiw	r24, 0x05	; 5
 5fe:	09 f0       	breq	.+2      	; 0x602 <__vector_6+0x88>
 600:	57 c0       	rjmp	.+174    	; 0x6b0 <__vector_6+0x136>
		OCR1A = timer_reg_val;
 602:	80 91 85 00 	lds	r24, 0x0085
 606:	90 91 86 00 	lds	r25, 0x0086
 60a:	9b bd       	out	0x2b, r25	; 43
 60c:	8a bd       	out	0x2a, r24	; 42
		TCCR1B = ((1 << WGM12) | timer_reg_div);
 60e:	8d e0       	ldi	r24, 0x0D	; 13
 610:	8e bd       	out	0x2e, r24	; 46
		TCNT1 = 0;
 612:	1d bc       	out	0x2d, r1	; 45
 614:	1c bc       	out	0x2c, r1	; 44
	
		sec_one++; 
 616:	80 91 a7 00 	lds	r24, 0x00A7
 61a:	8f 5f       	subi	r24, 0xFF	; 255
 61c:	80 93 a7 00 	sts	0x00A7, r24
		msec = 0; 
 620:	10 92 a9 00 	sts	0x00A9, r1
 624:	10 92 a8 00 	sts	0x00A8, r1
		if (sec_one == 10){
 628:	8a 30       	cpi	r24, 0x0A	; 10
 62a:	39 f4       	brne	.+14     	; 0x63a <__vector_6+0xc0>
			sec_ten++; 
 62c:	80 91 ab 00 	lds	r24, 0x00AB
 630:	8f 5f       	subi	r24, 0xFF	; 255
 632:	80 93 ab 00 	sts	0x00AB, r24
			sec_one=0;
 636:	10 92 a7 00 	sts	0x00A7, r1
		}
		
		if (sec_ten == 6) {min_one++; sec_ten=0;}
 63a:	80 91 ab 00 	lds	r24, 0x00AB
 63e:	86 30       	cpi	r24, 0x06	; 6
 640:	39 f4       	brne	.+14     	; 0x650 <__vector_6+0xd6>
 642:	80 91 ad 00 	lds	r24, 0x00AD
 646:	8f 5f       	subi	r24, 0xFF	; 255
 648:	80 93 ad 00 	sts	0x00AD, r24
 64c:	10 92 ab 00 	sts	0x00AB, r1
		if (min_one == 10) {min_ten++; min_one=0;}
 650:	80 91 ad 00 	lds	r24, 0x00AD
 654:	8a 30       	cpi	r24, 0x0A	; 10
 656:	39 f4       	brne	.+14     	; 0x666 <__vector_6+0xec>
 658:	80 91 aa 00 	lds	r24, 0x00AA
 65c:	8f 5f       	subi	r24, 0xFF	; 255
 65e:	80 93 aa 00 	sts	0x00AA, r24
 662:	10 92 ad 00 	sts	0x00AD, r1
		if (min_ten == 6) {hour_one++; min_ten=0;}
 666:	80 91 aa 00 	lds	r24, 0x00AA
 66a:	86 30       	cpi	r24, 0x06	; 6
 66c:	39 f4       	brne	.+14     	; 0x67c <__vector_6+0x102>
 66e:	80 91 ae 00 	lds	r24, 0x00AE
 672:	8f 5f       	subi	r24, 0xFF	; 255
 674:	80 93 ae 00 	sts	0x00AE, r24
 678:	10 92 aa 00 	sts	0x00AA, r1
		if (hour_one == 10) {hour_ten++; hour_one=0;}
 67c:	80 91 ae 00 	lds	r24, 0x00AE
 680:	8a 30       	cpi	r24, 0x0A	; 10
 682:	39 f4       	brne	.+14     	; 0x692 <__vector_6+0x118>
 684:	80 91 ac 00 	lds	r24, 0x00AC
 688:	8f 5f       	subi	r24, 0xFF	; 255
 68a:	80 93 ac 00 	sts	0x00AC, r24
 68e:	10 92 ae 00 	sts	0x00AE, r1
		if ((hour_ten == 2) & (hour_one == 4)) {
 692:	80 91 ac 00 	lds	r24, 0x00AC
 696:	82 30       	cpi	r24, 0x02	; 2
 698:	41 f4       	brne	.+16     	; 0x6aa <__vector_6+0x130>
 69a:	80 91 ae 00 	lds	r24, 0x00AE
 69e:	84 30       	cpi	r24, 0x04	; 4
 6a0:	21 f4       	brne	.+8      	; 0x6aa <__vector_6+0x130>
			hour_ten = 0; 
 6a2:	10 92 ac 00 	sts	0x00AC, r1
			hour_one = 0;
 6a6:	10 92 ae 00 	sts	0x00AE, r1
		}
		update_lcd = 1; 
 6aa:	81 e0       	ldi	r24, 0x01	; 1
 6ac:	80 93 a6 00 	sts	0x00A6, r24
	}
}
 6b0:	ff 91       	pop	r31
 6b2:	ef 91       	pop	r30
 6b4:	bf 91       	pop	r27
 6b6:	af 91       	pop	r26
 6b8:	9f 91       	pop	r25
 6ba:	8f 91       	pop	r24
 6bc:	7f 91       	pop	r23
 6be:	6f 91       	pop	r22
 6c0:	5f 91       	pop	r21
 6c2:	4f 91       	pop	r20
 6c4:	3f 91       	pop	r19
 6c6:	2f 91       	pop	r18
 6c8:	0f 91       	pop	r16
 6ca:	ef 90       	pop	r14
 6cc:	0f 90       	pop	r0
 6ce:	0f be       	out	0x3f, r0	; 63
 6d0:	0f 90       	pop	r0
 6d2:	1f 90       	pop	r1
 6d4:	18 95       	reti

000006d6 <lcd_putc>:
    }

	lcd_home();
}

void lcd_putc(char c){
 6d6:	1f 93       	push	r17
 6d8:	cf 93       	push	r28
 6da:	df 93       	push	r29
	if((c > 127 || 
 6dc:	18 2f       	mov	r17, r24
 6de:	10 52       	subi	r17, 0x20	; 32
 6e0:	10 36       	cpi	r17, 0x60	; 96
 6e2:	a0 f4       	brcc	.+40     	; 0x70c <lcd_putc+0x36>
		c != 'ß' &&
		c != 'Ü' &&
		c != 'Ö' &&
		c != 'Ä' ) ) return;
    
    lcd_send_i2c_start();
 6e4:	4f d2       	rcall	.+1182   	; 0xb84 <lcd_send_i2c_start>
    lcd_send_i2c_byte(0x40);	// 0x00 for command, 0x40 for data
 6e6:	80 e4       	ldi	r24, 0x40	; 64
 6e8:	5d d2       	rcall	.+1210   	; 0xba4 <lcd_send_i2c_byte>
				lcd_send_i2c_byte(pgm_read_byte(&ssd1306oled_font6x8[c * 6 + i]));	// print font to ram, print 6 columns
			}
			break;
		default:
                c -= 32;
                if( c < 127-32 ) {
 6ea:	1f 35       	cpi	r17, 0x5F	; 95
 6ec:	71 f0       	breq	.+28     	; 0x70a <lcd_putc+0x34>
 6ee:	86 e0       	ldi	r24, 0x06	; 6
 6f0:	18 9f       	mul	r17, r24
 6f2:	e0 01       	movw	r28, r0
 6f4:	11 24       	eor	r1, r1
 6f6:	ca 5c       	subi	r28, 0xCA	; 202
 6f8:	df 4f       	sbci	r29, 0xFF	; 255
 6fa:	10 e0       	ldi	r17, 0x00	; 0
                    for (uint8_t i = 0; i < 6; i++)
                    {
                        lcd_send_i2c_byte(pgm_read_byte(&ssd1306oled_font6x8[c * 6 + i]));	// print font to ram, print 6 columns
 6fc:	fe 01       	movw	r30, r28
 6fe:	84 91       	lpm	r24, Z+
 700:	51 d2       	rcall	.+1186   	; 0xba4 <lcd_send_i2c_byte>
			}
			break;
		default:
                c -= 32;
                if( c < 127-32 ) {
                    for (uint8_t i = 0; i < 6; i++)
 702:	1f 5f       	subi	r17, 0xFF	; 255
 704:	21 96       	adiw	r28, 0x01	; 1
 706:	16 30       	cpi	r17, 0x06	; 6
 708:	c9 f7       	brne	.-14     	; 0x6fc <lcd_putc+0x26>
                    }
                    //return;
                }
			break;
	}
    lcd_send_i2c_stop();
 70a:	49 d2       	rcall	.+1170   	; 0xb9e <lcd_send_i2c_stop>
}
 70c:	df 91       	pop	r29
 70e:	cf 91       	pop	r28
 710:	1f 91       	pop	r17
 712:	08 95       	ret

00000714 <lcd_puts_p>:
void lcd_puts(const char* s){
    while (*s) {
        lcd_putc(*s++);
    }
}
void lcd_puts_p(const char* progmem_s){
 714:	cf 93       	push	r28
 716:	df 93       	push	r29
 718:	ec 01       	movw	r28, r24
 71a:	01 c0       	rjmp	.+2      	; 0x71e <lcd_puts_p+0xa>
    register uint8_t c;
    while ((c = pgm_read_byte(progmem_s++))) {
        lcd_putc(c);
 71c:	dc df       	rcall	.-72     	; 0x6d6 <lcd_putc>
 71e:	fe 01       	movw	r30, r28
        lcd_putc(*s++);
    }
}
void lcd_puts_p(const char* progmem_s){
    register uint8_t c;
    while ((c = pgm_read_byte(progmem_s++))) {
 720:	21 96       	adiw	r28, 0x01	; 1
 722:	84 91       	lpm	r24, Z+
 724:	88 23       	and	r24, r24
 726:	d1 f7       	brne	.-12     	; 0x71c <lcd_puts_p+0x8>
        lcd_putc(c);
    }
}
 728:	df 91       	pop	r29
 72a:	cf 91       	pop	r28
 72c:	08 95       	ret

0000072e <lcd_puts>:
			break;
	}
    lcd_send_i2c_stop();
}

void lcd_puts(const char* s){
 72e:	cf 93       	push	r28
 730:	df 93       	push	r29
 732:	ec 01       	movw	r28, r24
 734:	02 c0       	rjmp	.+4      	; 0x73a <lcd_puts+0xc>
    while (*s) {
        lcd_putc(*s++);
 736:	21 96       	adiw	r28, 0x01	; 1
 738:	ce df       	rcall	.-100    	; 0x6d6 <lcd_putc>
	}
    lcd_send_i2c_stop();
}

void lcd_puts(const char* s){
    while (*s) {
 73a:	88 81       	ld	r24, Y
 73c:	88 23       	and	r24, r24
 73e:	d9 f7       	brne	.-10     	; 0x736 <lcd_puts+0x8>
        lcd_putc(*s++);
    }
}
 740:	df 91       	pop	r29
 742:	cf 91       	pop	r28
 744:	08 95       	ret

00000746 <lcd_data>:
    for (uint8_t i=0; i<size; i++) {
        lcd_send_i2c_byte(cmd[i]);
    }
    lcd_send_i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
 746:	ef 92       	push	r14
 748:	ff 92       	push	r15
 74a:	1f 93       	push	r17
 74c:	cf 93       	push	r28
 74e:	df 93       	push	r29
 750:	7c 01       	movw	r14, r24
 752:	eb 01       	movw	r28, r22
    lcd_send_i2c_start();
 754:	17 d2       	rcall	.+1070   	; 0xb84 <lcd_send_i2c_start>
    lcd_send_i2c_byte(0x40);	// 0x00 for command, 0x40 for data
 756:	80 e4       	ldi	r24, 0x40	; 64
 758:	25 d2       	rcall	.+1098   	; 0xba4 <lcd_send_i2c_byte>
 75a:	05 c0       	rjmp	.+10     	; 0x766 <lcd_data+0x20>
    for (uint8_t i; i<size; i++) {
        lcd_send_i2c_byte(data[i]);
 75c:	ee 0d       	add	r30, r14
 75e:	ff 1d       	adc	r31, r15
 760:	80 81       	ld	r24, Z
 762:	20 d2       	rcall	.+1088   	; 0xba4 <lcd_send_i2c_byte>
    lcd_send_i2c_stop();
}
void lcd_data(uint8_t data[], uint16_t size) {
    lcd_send_i2c_start();
    lcd_send_i2c_byte(0x40);	// 0x00 for command, 0x40 for data
    for (uint8_t i; i<size; i++) {
 764:	1f 5f       	subi	r17, 0xFF	; 255
 766:	e1 2f       	mov	r30, r17
 768:	f0 e0       	ldi	r31, 0x00	; 0
 76a:	ec 17       	cp	r30, r28
 76c:	fd 07       	cpc	r31, r29
 76e:	b0 f3       	brcs	.-20     	; 0x75c <lcd_data+0x16>
        lcd_send_i2c_byte(data[i]);
    }
    lcd_send_i2c_stop();
 770:	16 d2       	rcall	.+1068   	; 0xb9e <lcd_send_i2c_stop>
}
 772:	df 91       	pop	r29
 774:	cf 91       	pop	r28
 776:	1f 91       	pop	r17
 778:	ff 90       	pop	r15
 77a:	ef 90       	pop	r14
 77c:	08 95       	ret

0000077e <lcd_command>:

void lcd_home(void){
	lcd_gotoxy(0, 0);
}

void lcd_command(uint8_t cmd[], uint8_t size) {
 77e:	ff 92       	push	r15
 780:	0f 93       	push	r16
 782:	1f 93       	push	r17
 784:	cf 93       	push	r28
 786:	df 93       	push	r29
 788:	18 2f       	mov	r17, r24
 78a:	09 2f       	mov	r16, r25
 78c:	f6 2e       	mov	r15, r22
    lcd_send_i2c_start();
 78e:	fa d1       	rcall	.+1012   	; 0xb84 <lcd_send_i2c_start>
    lcd_send_i2c_byte(0x00);	// 0x00 for command, 0x40 for data
 790:	80 e0       	ldi	r24, 0x00	; 0
 792:	08 d2       	rcall	.+1040   	; 0xba4 <lcd_send_i2c_byte>
 794:	21 2f       	mov	r18, r17
 796:	30 2f       	mov	r19, r16
 798:	c9 01       	movw	r24, r18
 79a:	ec 01       	movw	r28, r24
 79c:	10 e0       	ldi	r17, 0x00	; 0
 79e:	03 c0       	rjmp	.+6      	; 0x7a6 <lcd_command+0x28>
    for (uint8_t i=0; i<size; i++) {
        lcd_send_i2c_byte(cmd[i]);
 7a0:	89 91       	ld	r24, Y+
 7a2:	00 d2       	rcall	.+1024   	; 0xba4 <lcd_send_i2c_byte>
}

void lcd_command(uint8_t cmd[], uint8_t size) {
    lcd_send_i2c_start();
    lcd_send_i2c_byte(0x00);	// 0x00 for command, 0x40 for data
    for (uint8_t i=0; i<size; i++) {
 7a4:	1f 5f       	subi	r17, 0xFF	; 255
 7a6:	1f 15       	cp	r17, r15
 7a8:	d8 f3       	brcs	.-10     	; 0x7a0 <lcd_command+0x22>
        lcd_send_i2c_byte(cmd[i]);
    }
    lcd_send_i2c_stop();
 7aa:	f9 d1       	rcall	.+1010   	; 0xb9e <lcd_send_i2c_stop>
}
 7ac:	df 91       	pop	r29
 7ae:	cf 91       	pop	r28
 7b0:	1f 91       	pop	r17
 7b2:	0f 91       	pop	r16
 7b4:	ff 90       	pop	r15
 7b6:	08 95       	ret

000007b8 <lcd_set_contrast>:
        commandSequence[0] = 0xA7;
    }
    lcd_command(commandSequence, 1);
}

void lcd_set_contrast(uint8_t contrast){
 7b8:	df 93       	push	r29
 7ba:	cf 93       	push	r28
 7bc:	00 d0       	rcall	.+0      	; 0x7be <lcd_set_contrast+0x6>
 7be:	cd b7       	in	r28, 0x3d	; 61
 7c0:	de b7       	in	r29, 0x3e	; 62
    uint8_t commandSequence[2] = {0x81, contrast};
 7c2:	91 e8       	ldi	r25, 0x81	; 129
 7c4:	99 83       	std	Y+1, r25	; 0x01
 7c6:	8a 83       	std	Y+2, r24	; 0x02
    lcd_command(commandSequence, sizeof(commandSequence));
 7c8:	ce 01       	movw	r24, r28
 7ca:	01 96       	adiw	r24, 0x01	; 1
 7cc:	62 e0       	ldi	r22, 0x02	; 2
 7ce:	d7 df       	rcall	.-82     	; 0x77e <lcd_command>
}
 7d0:	0f 90       	pop	r0
 7d2:	0f 90       	pop	r0
 7d4:	cf 91       	pop	r28
 7d6:	df 91       	pop	r29
 7d8:	08 95       	ret

000007da <lcd_invert>:
    while ((c = pgm_read_byte(progmem_s++))) {
        lcd_putc(c);
    }
}

void lcd_invert(uint8_t invert){
 7da:	1f 93       	push	r17
 7dc:	df 93       	push	r29
 7de:	cf 93       	push	r28
 7e0:	0f 92       	push	r0
 7e2:	cd b7       	in	r28, 0x3d	; 61
 7e4:	de b7       	in	r29, 0x3e	; 62
    lcd_send_i2c_start();
 7e6:	ce d1       	rcall	.+924    	; 0xb84 <lcd_send_i2c_start>
    uint8_t commandSequence[1];
    if (invert == YES) {
        commandSequence[0] = 0xA7;
    } else {
        commandSequence[0] = 0xA7;
 7e8:	87 ea       	ldi	r24, 0xA7	; 167
 7ea:	89 83       	std	Y+1, r24	; 0x01
    }
    lcd_command(commandSequence, 1);
 7ec:	ce 01       	movw	r24, r28
 7ee:	01 96       	adiw	r24, 0x01	; 1
 7f0:	61 e0       	ldi	r22, 0x01	; 1
 7f2:	c5 df       	rcall	.-118    	; 0x77e <lcd_command>
}
 7f4:	0f 90       	pop	r0
 7f6:	cf 91       	pop	r28
 7f8:	df 91       	pop	r29
 7fa:	1f 91       	pop	r17
 7fc:	08 95       	ret

000007fe <lcd_gotoxy>:
    for (uint8_t i; i<size; i++) {
        lcd_send_i2c_byte(data[i]);
    }
    lcd_send_i2c_stop();
}
void lcd_gotoxy(uint8_t x, uint8_t y){
 7fe:	df 93       	push	r29
 800:	cf 93       	push	r28
 802:	00 d0       	rcall	.+0      	; 0x804 <lcd_gotoxy+0x6>
 804:	00 d0       	rcall	.+0      	; 0x806 <lcd_gotoxy+0x8>
 806:	cd b7       	in	r28, 0x3d	; 61
 808:	de b7       	in	r29, 0x3e	; 62
 80a:	98 2f       	mov	r25, r24
    if( x > (DISPLAY_WIDTH) || y > (DISPLAY_HEIGHT/8-1)) return;// out of display
 80c:	81 38       	cpi	r24, 0x81	; 129
 80e:	68 f4       	brcc	.+26     	; 0x82a <lcd_gotoxy+0x2c>
 810:	68 30       	cpi	r22, 0x08	; 8
 812:	58 f4       	brcc	.+22     	; 0x82a <lcd_gotoxy+0x2c>
    //x = x * 8;					// one char: 6 pixel width
#if defined SSD1306
    uint8_t commandSequence[] = {0xb0+y, 0x21, x, 0x7f};
 814:	60 55       	subi	r22, 0x50	; 80
 816:	69 83       	std	Y+1, r22	; 0x01
 818:	81 e2       	ldi	r24, 0x21	; 33
 81a:	8a 83       	std	Y+2, r24	; 0x02
 81c:	9b 83       	std	Y+3, r25	; 0x03
 81e:	8f e7       	ldi	r24, 0x7F	; 127
 820:	8c 83       	std	Y+4, r24	; 0x04
#elif defined SH1106
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
 822:	ce 01       	movw	r24, r28
 824:	01 96       	adiw	r24, 0x01	; 1
 826:	64 e0       	ldi	r22, 0x04	; 4
 828:	aa df       	rcall	.-172    	; 0x77e <lcd_command>
}
 82a:	0f 90       	pop	r0
 82c:	0f 90       	pop	r0
 82e:	0f 90       	pop	r0
 830:	0f 90       	pop	r0
 832:	cf 91       	pop	r28
 834:	df 91       	pop	r29
 836:	08 95       	ret

00000838 <lcd_home>:
    lcd_command(commandSequence, sizeof(commandSequence));
    lcd_clrscr();
}

void lcd_home(void){
	lcd_gotoxy(0, 0);
 838:	80 e0       	ldi	r24, 0x00	; 0
 83a:	60 e0       	ldi	r22, 0x00	; 0
 83c:	e0 df       	rcall	.-64     	; 0x7fe <lcd_gotoxy>
}
 83e:	08 95       	ret

00000840 <lcd_clrscr>:
    uint8_t commandSequence[] = {0xb0+y, 0x21, 0x00+((2+x) & (0x0f)), 0x10+( ((2+x) & (0xf0)) >> 4 ), 0x7f};
#endif
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_clrscr(void){
 840:	cf 93       	push	r28
 842:	df 93       	push	r29
    lcd_home();
 844:	f9 df       	rcall	.-14     	; 0x838 <lcd_home>
 846:	c0 e0       	ldi	r28, 0x00	; 0
 848:	d0 e0       	ldi	r29, 0x00	; 0
    for (uint16_t i = 0; i < DISPLAYSIZE; i++) {
        lcd_data(0x01, 1);
 84a:	81 e0       	ldi	r24, 0x01	; 1
 84c:	90 e0       	ldi	r25, 0x00	; 0
 84e:	61 e0       	ldi	r22, 0x01	; 1
 850:	70 e0       	ldi	r23, 0x00	; 0
 852:	79 df       	rcall	.-270    	; 0x746 <lcd_data>
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_clrscr(void){
    lcd_home();
    for (uint16_t i = 0; i < DISPLAYSIZE; i++) {
 854:	21 96       	adiw	r28, 0x01	; 1
 856:	84 e0       	ldi	r24, 0x04	; 4
 858:	c0 30       	cpi	r28, 0x00	; 0
 85a:	d8 07       	cpc	r29, r24
 85c:	b1 f7       	brne	.-20     	; 0x84a <lcd_clrscr+0xa>
        lcd_data(0x01, 1);
    }

	lcd_home();
 85e:	ec df       	rcall	.-40     	; 0x838 <lcd_home>
}
 860:	df 91       	pop	r29
 862:	cf 91       	pop	r28
 864:	08 95       	ret

00000866 <lcd_clear_bigc>:
		lcd_send_i2c_stop();		
    }
}


void lcd_clear_bigc(uint8_t column, uint8_t char_height){
 866:	ef 92       	push	r14
 868:	ff 92       	push	r15
 86a:	0f 93       	push	r16
 86c:	1f 93       	push	r17
 86e:	e8 2e       	mov	r14, r24
 870:	f6 2e       	mov	r15, r22
	for (uint8_t i = 0; i < (char_height >> 3) ; i++) {
 872:	f6 94       	lsr	r15
 874:	f6 94       	lsr	r15
 876:	f6 94       	lsr	r15
 878:	00 e0       	ldi	r16, 0x00	; 0
 87a:	0e c0       	rjmp	.+28     	; 0x898 <lcd_clear_bigc+0x32>
		lcd_gotoxy(column, 1+i); 
 87c:	0f 5f       	subi	r16, 0xFF	; 255
 87e:	8e 2d       	mov	r24, r14
 880:	60 2f       	mov	r22, r16
 882:	bd df       	rcall	.-134    	; 0x7fe <lcd_gotoxy>
		lcd_send_i2c_start();
 884:	7f d1       	rcall	.+766    	; 0xb84 <lcd_send_i2c_start>
    	lcd_send_i2c_byte(0x40);
 886:	80 e4       	ldi	r24, 0x40	; 64
 888:	8d d1       	rcall	.+794    	; 0xba4 <lcd_send_i2c_byte>
 88a:	10 e0       	ldi	r17, 0x00	; 0
		for (uint8_t j = 0; j < 18; j++)
			{
   			lcd_send_i2c_byte(0x00); 
 88c:	80 e0       	ldi	r24, 0x00	; 0
 88e:	8a d1       	rcall	.+788    	; 0xba4 <lcd_send_i2c_byte>
void lcd_clear_bigc(uint8_t column, uint8_t char_height){
	for (uint8_t i = 0; i < (char_height >> 3) ; i++) {
		lcd_gotoxy(column, 1+i); 
		lcd_send_i2c_start();
    	lcd_send_i2c_byte(0x40);
		for (uint8_t j = 0; j < 18; j++)
 890:	1f 5f       	subi	r17, 0xFF	; 255
 892:	12 31       	cpi	r17, 0x12	; 18
 894:	d9 f7       	brne	.-10     	; 0x88c <lcd_clear_bigc+0x26>
			{
   			lcd_send_i2c_byte(0x00); 
			}
		lcd_send_i2c_stop();
 896:	83 d1       	rcall	.+774    	; 0xb9e <lcd_send_i2c_stop>
    }
}


void lcd_clear_bigc(uint8_t column, uint8_t char_height){
	for (uint8_t i = 0; i < (char_height >> 3) ; i++) {
 898:	0f 15       	cp	r16, r15
 89a:	80 f3       	brcs	.-32     	; 0x87c <lcd_clear_bigc+0x16>
   			lcd_send_i2c_byte(0x00); 
			}
		lcd_send_i2c_stop();
		
    }
}
 89c:	1f 91       	pop	r17
 89e:	0f 91       	pop	r16
 8a0:	ff 90       	pop	r15
 8a2:	ef 90       	pop	r14
 8a4:	08 95       	ret

000008a6 <lcd_put_bigc>:
void lcd_set_contrast(uint8_t contrast){
    uint8_t commandSequence[2] = {0x81, contrast};
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
 8a6:	6f 92       	push	r6
 8a8:	7f 92       	push	r7
 8aa:	8f 92       	push	r8
 8ac:	9f 92       	push	r9
 8ae:	af 92       	push	r10
 8b0:	bf 92       	push	r11
 8b2:	cf 92       	push	r12
 8b4:	df 92       	push	r13
 8b6:	ef 92       	push	r14
 8b8:	ff 92       	push	r15
 8ba:	0f 93       	push	r16
 8bc:	1f 93       	push	r17
 8be:	cf 93       	push	r28
 8c0:	df 93       	push	r29
 8c2:	66 2e       	mov	r6, r22
 8c4:	72 2e       	mov	r7, r18
 8c6:	b0 2e       	mov	r11, r16
	uint8_t x_offset = ((general_width - char_width)>>1); 
 8c8:	c4 2e       	mov	r12, r20
 8ca:	dd 24       	eor	r13, r13
 8cc:	30 e0       	ldi	r19, 0x00	; 0
 8ce:	2c 19       	sub	r18, r12
 8d0:	3d 09       	sbc	r19, r13
 8d2:	35 95       	asr	r19
 8d4:	27 95       	ror	r18
 8d6:	a2 2e       	mov	r10, r18

	for (uint8_t i = 0; i < (char_height >> 3); i++) {
 8d8:	b6 94       	lsr	r11
 8da:	b6 94       	lsr	r11
 8dc:	b6 94       	lsr	r11
void lcd_set_contrast(uint8_t contrast){
    uint8_t commandSequence[2] = {0x81, contrast};
    lcd_command(commandSequence, sizeof(commandSequence));
}

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
 8de:	30 e0       	ldi	r19, 0x00	; 0
 8e0:	7c 01       	movw	r14, r24
 8e2:	e2 1a       	sub	r14, r18
 8e4:	f3 0a       	sbc	r15, r19
 8e6:	00 e0       	ldi	r16, 0x00	; 0
		for (uint8_t j = 0; j < general_width; j++)
			if(j < x_offset) {
				lcd_send_i2c_byte(0x00);
				}
			else {
				if(j < (x_offset + char_width)) {
 8e8:	49 01       	movw	r8, r18
 8ea:	8c 0c       	add	r8, r12
 8ec:	9d 1c       	adc	r9, r13
 8ee:	1d c0       	rjmp	.+58     	; 0x92a <lcd_put_bigc+0x84>

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
	uint8_t x_offset = ((general_width - char_width)>>1); 

	for (uint8_t i = 0; i < (char_height >> 3); i++) {
		lcd_gotoxy(column, 1+i); 
 8f0:	0f 5f       	subi	r16, 0xFF	; 255
 8f2:	86 2d       	mov	r24, r6
 8f4:	60 2f       	mov	r22, r16
 8f6:	83 df       	rcall	.-250    	; 0x7fe <lcd_gotoxy>
		lcd_send_i2c_start();
 8f8:	45 d1       	rcall	.+650    	; 0xb84 <lcd_send_i2c_start>
    	lcd_send_i2c_byte(0x40);
 8fa:	80 e4       	ldi	r24, 0x40	; 64
 8fc:	53 d1       	rcall	.+678    	; 0xba4 <lcd_send_i2c_byte>
 8fe:	e7 01       	movw	r28, r14
 900:	10 e0       	ldi	r17, 0x00	; 0
 902:	0e c0       	rjmp	.+28     	; 0x920 <lcd_put_bigc+0x7a>
	
		for (uint8_t j = 0; j < general_width; j++)
			if(j < x_offset) {
 904:	1a 15       	cp	r17, r10
 906:	40 f0       	brcs	.+16     	; 0x918 <lcd_put_bigc+0x72>
				lcd_send_i2c_byte(0x00);
				}
			else {
				if(j < (x_offset + char_width)) {
 908:	81 2f       	mov	r24, r17
 90a:	90 e0       	ldi	r25, 0x00	; 0
 90c:	88 15       	cp	r24, r8
 90e:	99 05       	cpc	r25, r9
 910:	1c f4       	brge	.+6      	; 0x918 <lcd_put_bigc+0x72>
		   			lcd_send_i2c_byte(pgm_read_byte(&addr[j-x_offset+char_width*i])); 
 912:	fe 01       	movw	r30, r28
 914:	84 91       	lpm	r24, Z+
 916:	01 c0       	rjmp	.+2      	; 0x91a <lcd_put_bigc+0x74>
					}
				else {
					lcd_send_i2c_byte(0x00);
 918:	80 e0       	ldi	r24, 0x00	; 0
 91a:	44 d1       	rcall	.+648    	; 0xba4 <lcd_send_i2c_byte>
	for (uint8_t i = 0; i < (char_height >> 3); i++) {
		lcd_gotoxy(column, 1+i); 
		lcd_send_i2c_start();
    	lcd_send_i2c_byte(0x40);
	
		for (uint8_t j = 0; j < general_width; j++)
 91c:	1f 5f       	subi	r17, 0xFF	; 255
 91e:	21 96       	adiw	r28, 0x01	; 1
 920:	17 15       	cp	r17, r7
 922:	80 f3       	brcs	.-32     	; 0x904 <lcd_put_bigc+0x5e>
				else {
					lcd_send_i2c_byte(0x00);
					}
				}		

		lcd_send_i2c_stop();		
 924:	3c d1       	rcall	.+632    	; 0xb9e <lcd_send_i2c_stop>
 926:	ec 0c       	add	r14, r12
 928:	fd 1c       	adc	r15, r13
}

void lcd_put_bigc(const char* addr, uint8_t column, uint8_t char_width, uint8_t general_width, uint8_t char_height){
	uint8_t x_offset = ((general_width - char_width)>>1); 

	for (uint8_t i = 0; i < (char_height >> 3); i++) {
 92a:	0b 15       	cp	r16, r11
 92c:	08 f3       	brcs	.-62     	; 0x8f0 <lcd_put_bigc+0x4a>
					}
				}		

		lcd_send_i2c_stop();		
    }
}
 92e:	df 91       	pop	r29
 930:	cf 91       	pop	r28
 932:	1f 91       	pop	r17
 934:	0f 91       	pop	r16
 936:	ff 90       	pop	r15
 938:	ef 90       	pop	r14
 93a:	df 90       	pop	r13
 93c:	cf 90       	pop	r12
 93e:	bf 90       	pop	r11
 940:	af 90       	pop	r10
 942:	9f 90       	pop	r9
 944:	8f 90       	pop	r8
 946:	7f 90       	pop	r7
 948:	6f 90       	pop	r6
 94a:	08 95       	ret

0000094c <lcd_update_4>:
	lcd_put_bigc (bitmap_addr[c0], 103, char_width[c0], CHAR_WIDTH, CHAR_HEIGHT);

}


void lcd_update_4(uint8_t c3, uint8_t c2, uint8_t c1, uint8_t c0){
 94c:	af 92       	push	r10
 94e:	bf 92       	push	r11
 950:	cf 92       	push	r12
 952:	df 92       	push	r13
 954:	ef 92       	push	r14
 956:	ff 92       	push	r15
 958:	0f 93       	push	r16
 95a:	1f 93       	push	r17
 95c:	e8 2e       	mov	r14, r24
 95e:	16 2f       	mov	r17, r22
 960:	b4 2e       	mov	r11, r20
 962:	a2 2e       	mov	r10, r18
	/*if(c3 == 0)
		lcd_clear_bigc(0); 
	else*/
	lcd_put_bigc(bitmap_colon, 48, char_width[10], CHAR_WIDTH, CHAR_HEIGHT);
 964:	86 e2       	ldi	r24, 0x26	; 38
 966:	90 e0       	ldi	r25, 0x00	; 0
 968:	60 e3       	ldi	r22, 0x30	; 48
 96a:	44 e0       	ldi	r20, 0x04	; 4
 96c:	26 e1       	ldi	r18, 0x16	; 22
 96e:	00 e2       	ldi	r16, 0x20	; 32
 970:	9a df       	rcall	.-204    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c3], 0, char_width[c3], CHAR_WIDTH, CHAR_HEIGHT);
 972:	ae 2d       	mov	r26, r14
 974:	b0 e0       	ldi	r27, 0x00	; 0
 976:	22 e9       	ldi	r18, 0x92	; 146
 978:	c2 2e       	mov	r12, r18
 97a:	20 e0       	ldi	r18, 0x00	; 0
 97c:	d2 2e       	mov	r13, r18
 97e:	fd 01       	movw	r30, r26
 980:	ee 0f       	add	r30, r30
 982:	ff 1f       	adc	r31, r31
 984:	ec 0d       	add	r30, r12
 986:	fd 1d       	adc	r31, r13
 988:	87 e8       	ldi	r24, 0x87	; 135
 98a:	e8 2e       	mov	r14, r24
 98c:	80 e0       	ldi	r24, 0x00	; 0
 98e:	f8 2e       	mov	r15, r24
 990:	ae 0d       	add	r26, r14
 992:	bf 1d       	adc	r27, r15
 994:	80 81       	ld	r24, Z
 996:	91 81       	ldd	r25, Z+1	; 0x01
 998:	60 e0       	ldi	r22, 0x00	; 0
 99a:	4c 91       	ld	r20, X
 99c:	26 e1       	ldi	r18, 0x16	; 22
 99e:	83 df       	rcall	.-250    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c2], 24, char_width[c2], CHAR_WIDTH, CHAR_HEIGHT);	
 9a0:	a1 2f       	mov	r26, r17
 9a2:	b0 e0       	ldi	r27, 0x00	; 0
 9a4:	fd 01       	movw	r30, r26
 9a6:	ee 0f       	add	r30, r30
 9a8:	ff 1f       	adc	r31, r31
 9aa:	ec 0d       	add	r30, r12
 9ac:	fd 1d       	adc	r31, r13
 9ae:	ae 0d       	add	r26, r14
 9b0:	bf 1d       	adc	r27, r15
 9b2:	80 81       	ld	r24, Z
 9b4:	91 81       	ldd	r25, Z+1	; 0x01
 9b6:	68 e1       	ldi	r22, 0x18	; 24
 9b8:	4c 91       	ld	r20, X
 9ba:	26 e1       	ldi	r18, 0x16	; 22
 9bc:	74 df       	rcall	.-280    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c1], 72, char_width[c1], CHAR_WIDTH, CHAR_HEIGHT);
 9be:	ab 2d       	mov	r26, r11
 9c0:	b0 e0       	ldi	r27, 0x00	; 0
 9c2:	fd 01       	movw	r30, r26
 9c4:	ee 0f       	add	r30, r30
 9c6:	ff 1f       	adc	r31, r31
 9c8:	ec 0d       	add	r30, r12
 9ca:	fd 1d       	adc	r31, r13
 9cc:	ae 0d       	add	r26, r14
 9ce:	bf 1d       	adc	r27, r15
 9d0:	80 81       	ld	r24, Z
 9d2:	91 81       	ldd	r25, Z+1	; 0x01
 9d4:	68 e4       	ldi	r22, 0x48	; 72
 9d6:	4c 91       	ld	r20, X
 9d8:	26 e1       	ldi	r18, 0x16	; 22
 9da:	65 df       	rcall	.-310    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c0], 96, char_width[c0], CHAR_WIDTH, CHAR_HEIGHT);
 9dc:	bb 24       	eor	r11, r11
 9de:	c5 01       	movw	r24, r10
 9e0:	88 0f       	add	r24, r24
 9e2:	99 1f       	adc	r25, r25
 9e4:	c8 0e       	add	r12, r24
 9e6:	d9 1e       	adc	r13, r25
 9e8:	ea 0c       	add	r14, r10
 9ea:	fb 1c       	adc	r15, r11
 9ec:	f6 01       	movw	r30, r12
 9ee:	80 81       	ld	r24, Z
 9f0:	91 81       	ldd	r25, Z+1	; 0x01
 9f2:	60 e6       	ldi	r22, 0x60	; 96
 9f4:	f7 01       	movw	r30, r14
 9f6:	40 81       	ld	r20, Z
 9f8:	26 e1       	ldi	r18, 0x16	; 22
 9fa:	55 df       	rcall	.-342    	; 0x8a6 <lcd_put_bigc>

}
 9fc:	1f 91       	pop	r17
 9fe:	0f 91       	pop	r16
 a00:	ff 90       	pop	r15
 a02:	ef 90       	pop	r14
 a04:	df 90       	pop	r13
 a06:	cf 90       	pop	r12
 a08:	bf 90       	pop	r11
 a0a:	af 90       	pop	r10
 a0c:	08 95       	ret

00000a0e <lcd_update_6>:
		
    }
}


void lcd_update_6(uint8_t c5,uint8_t c4,uint8_t c3, uint8_t c2, uint8_t c1, uint8_t c0){
 a0e:	bf 92       	push	r11
 a10:	cf 92       	push	r12
 a12:	df 92       	push	r13
 a14:	ef 92       	push	r14
 a16:	ff 92       	push	r15
 a18:	0f 93       	push	r16
 a1a:	1f 93       	push	r17
 a1c:	18 2f       	mov	r17, r24
 a1e:	d6 2e       	mov	r13, r22
 a20:	f4 2e       	mov	r15, r20
 a22:	c2 2e       	mov	r12, r18
 a24:	b0 2e       	mov	r11, r16
	lcd_put_bigc (bitmap_colon, 72, char_width[10], CHAR_WIDTH, CHAR_HEIGHT);
 a26:	86 e2       	ldi	r24, 0x26	; 38
 a28:	90 e0       	ldi	r25, 0x00	; 0
 a2a:	68 e4       	ldi	r22, 0x48	; 72
 a2c:	44 e0       	ldi	r20, 0x04	; 4
 a2e:	26 e1       	ldi	r18, 0x16	; 22
 a30:	00 e2       	ldi	r16, 0x20	; 32
 a32:	39 df       	rcall	.-398    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_colon, 32, char_width[10], CHAR_WIDTH-4, CHAR_HEIGHT);
 a34:	86 e2       	ldi	r24, 0x26	; 38
 a36:	90 e0       	ldi	r25, 0x00	; 0
 a38:	60 e2       	ldi	r22, 0x20	; 32
 a3a:	44 e0       	ldi	r20, 0x04	; 4
 a3c:	22 e1       	ldi	r18, 0x12	; 18
 a3e:	33 df       	rcall	.-410    	; 0x8a6 <lcd_put_bigc>
	if(c3 == 0)
 a40:	ff 20       	and	r15, r15
 a42:	21 f4       	brne	.+8      	; 0xa4c <lcd_update_6+0x3e>
		lcd_clear_bigc(0, CHAR_HEIGHT); 
 a44:	80 e0       	ldi	r24, 0x00	; 0
 a46:	60 e2       	ldi	r22, 0x20	; 32
 a48:	0e df       	rcall	.-484    	; 0x866 <lcd_clear_bigc>
 a4a:	10 c0       	rjmp	.+32     	; 0xa6c <lcd_update_6+0x5e>
	else
		lcd_put_bigc (bitmap_addr[c5], 0, char_width[c5], CHAR_WIDTH, CHAR_HEIGHT);
 a4c:	a1 2f       	mov	r26, r17
 a4e:	b0 e0       	ldi	r27, 0x00	; 0
 a50:	fd 01       	movw	r30, r26
 a52:	ee 0f       	add	r30, r30
 a54:	ff 1f       	adc	r31, r31
 a56:	ee 56       	subi	r30, 0x6E	; 110
 a58:	ff 4f       	sbci	r31, 0xFF	; 255
 a5a:	a9 57       	subi	r26, 0x79	; 121
 a5c:	bf 4f       	sbci	r27, 0xFF	; 255
 a5e:	80 81       	ld	r24, Z
 a60:	91 81       	ldd	r25, Z+1	; 0x01
 a62:	60 e0       	ldi	r22, 0x00	; 0
 a64:	4c 91       	ld	r20, X
 a66:	26 e1       	ldi	r18, 0x16	; 22
 a68:	00 e2       	ldi	r16, 0x20	; 32
 a6a:	1d df       	rcall	.-454    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c4], 18, char_width[c4], CHAR_WIDTH, CHAR_HEIGHT);	
 a6c:	ad 2d       	mov	r26, r13
 a6e:	b0 e0       	ldi	r27, 0x00	; 0
 a70:	fd 01       	movw	r30, r26
 a72:	ee 0f       	add	r30, r30
 a74:	ff 1f       	adc	r31, r31
 a76:	ee 56       	subi	r30, 0x6E	; 110
 a78:	ff 4f       	sbci	r31, 0xFF	; 255
 a7a:	a9 57       	subi	r26, 0x79	; 121
 a7c:	bf 4f       	sbci	r27, 0xFF	; 255
 a7e:	80 81       	ld	r24, Z
 a80:	91 81       	ldd	r25, Z+1	; 0x01
 a82:	62 e1       	ldi	r22, 0x12	; 18
 a84:	4c 91       	ld	r20, X
 a86:	26 e1       	ldi	r18, 0x16	; 22
 a88:	00 e2       	ldi	r16, 0x20	; 32
 a8a:	0d df       	rcall	.-486    	; 0x8a6 <lcd_put_bigc>
	
	lcd_put_bigc (bitmap_addr[c3], 42, char_width[c3], CHAR_WIDTH, CHAR_HEIGHT);
 a8c:	af 2d       	mov	r26, r15
 a8e:	b0 e0       	ldi	r27, 0x00	; 0
 a90:	fd 01       	movw	r30, r26
 a92:	ee 0f       	add	r30, r30
 a94:	ff 1f       	adc	r31, r31
 a96:	ee 56       	subi	r30, 0x6E	; 110
 a98:	ff 4f       	sbci	r31, 0xFF	; 255
 a9a:	a9 57       	subi	r26, 0x79	; 121
 a9c:	bf 4f       	sbci	r27, 0xFF	; 255
 a9e:	80 81       	ld	r24, Z
 aa0:	91 81       	ldd	r25, Z+1	; 0x01
 aa2:	6a e2       	ldi	r22, 0x2A	; 42
 aa4:	4c 91       	ld	r20, X
 aa6:	26 e1       	ldi	r18, 0x16	; 22
 aa8:	fe de       	rcall	.-516    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c2], 60, char_width[c2], CHAR_WIDTH, CHAR_HEIGHT);
 aaa:	ac 2d       	mov	r26, r12
 aac:	b0 e0       	ldi	r27, 0x00	; 0
 aae:	fd 01       	movw	r30, r26
 ab0:	ee 0f       	add	r30, r30
 ab2:	ff 1f       	adc	r31, r31
 ab4:	ee 56       	subi	r30, 0x6E	; 110
 ab6:	ff 4f       	sbci	r31, 0xFF	; 255
 ab8:	a9 57       	subi	r26, 0x79	; 121
 aba:	bf 4f       	sbci	r27, 0xFF	; 255
 abc:	80 81       	ld	r24, Z
 abe:	91 81       	ldd	r25, Z+1	; 0x01
 ac0:	6c e3       	ldi	r22, 0x3C	; 60
 ac2:	4c 91       	ld	r20, X
 ac4:	26 e1       	ldi	r18, 0x16	; 22
 ac6:	ef de       	rcall	.-546    	; 0x8a6 <lcd_put_bigc>
	
	lcd_put_bigc (bitmap_addr[c1], 85, char_width[c1], CHAR_WIDTH, CHAR_HEIGHT);
 ac8:	ab 2d       	mov	r26, r11
 aca:	b0 e0       	ldi	r27, 0x00	; 0
 acc:	fd 01       	movw	r30, r26
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31
 ad2:	ee 56       	subi	r30, 0x6E	; 110
 ad4:	ff 4f       	sbci	r31, 0xFF	; 255
 ad6:	a9 57       	subi	r26, 0x79	; 121
 ad8:	bf 4f       	sbci	r27, 0xFF	; 255
 ada:	80 81       	ld	r24, Z
 adc:	91 81       	ldd	r25, Z+1	; 0x01
 ade:	65 e5       	ldi	r22, 0x55	; 85
 ae0:	4c 91       	ld	r20, X
 ae2:	26 e1       	ldi	r18, 0x16	; 22
 ae4:	e0 de       	rcall	.-576    	; 0x8a6 <lcd_put_bigc>
	lcd_put_bigc (bitmap_addr[c0], 103, char_width[c0], CHAR_WIDTH, CHAR_HEIGHT);
 ae6:	ae 2d       	mov	r26, r14
 ae8:	b0 e0       	ldi	r27, 0x00	; 0
 aea:	fd 01       	movw	r30, r26
 aec:	ee 0f       	add	r30, r30
 aee:	ff 1f       	adc	r31, r31
 af0:	ee 56       	subi	r30, 0x6E	; 110
 af2:	ff 4f       	sbci	r31, 0xFF	; 255
 af4:	a9 57       	subi	r26, 0x79	; 121
 af6:	bf 4f       	sbci	r27, 0xFF	; 255
 af8:	80 81       	ld	r24, Z
 afa:	91 81       	ldd	r25, Z+1	; 0x01
 afc:	67 e6       	ldi	r22, 0x67	; 103
 afe:	4c 91       	ld	r20, X
 b00:	26 e1       	ldi	r18, 0x16	; 22
 b02:	d1 de       	rcall	.-606    	; 0x8a6 <lcd_put_bigc>

}
 b04:	1f 91       	pop	r17
 b06:	0f 91       	pop	r16
 b08:	ff 90       	pop	r15
 b0a:	ef 90       	pop	r14
 b0c:	df 90       	pop	r13
 b0e:	cf 90       	pop	r12
 b10:	bf 90       	pop	r11
 b12:	08 95       	ret

00000b14 <lcd_init>:
#include "./fonts/ascii_6x8.h"

#define CHAR_HEIGHT CHAR_HEIGHT_32
#define CHAR_WIDTH CHAR_WIDTH_32-2

void lcd_init(uint8_t dispAttr){
 b14:	1f 93       	push	r17
 b16:	df 93       	push	r29
 b18:	cf 93       	push	r28
 b1a:	cd b7       	in	r28, 0x3d	; 61
 b1c:	de b7       	in	r29, 0x3e	; 62
 b1e:	6c 97       	sbiw	r28, 0x1c	; 28
 b20:	0f b6       	in	r0, 0x3f	; 63
 b22:	f8 94       	cli
 b24:	de bf       	out	0x3e, r29	; 62
 b26:	0f be       	out	0x3f, r0	; 63
 b28:	cd bf       	out	0x3d, r28	; 61
 b2a:	18 2f       	mov	r17, r24
    if(LCD_INIT_I2C == YES) i2c_init();
 b2c:	1f d0       	rcall	.+62     	; 0xb6c <i2c_init>
 b2e:	20 e0       	ldi	r18, 0x00	; 0
 b30:	30 e0       	ldi	r19, 0x00	; 0
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
 b32:	ce 01       	movw	r24, r28
 b34:	01 96       	adiw	r24, 0x01	; 1
 b36:	f9 01       	movw	r30, r18
 b38:	e0 56       	subi	r30, 0x60	; 96
 b3a:	fd 4f       	sbci	r31, 0xFD	; 253
 b3c:	e4 91       	lpm	r30, Z+
 b3e:	dc 01       	movw	r26, r24
 b40:	a2 0f       	add	r26, r18
 b42:	b3 1f       	adc	r27, r19
 b44:	ec 93       	st	X, r30
 b46:	2f 5f       	subi	r18, 0xFF	; 255
 b48:	3f 4f       	sbci	r19, 0xFF	; 255
#define CHAR_WIDTH CHAR_WIDTH_32-2

void lcd_init(uint8_t dispAttr){
    if(LCD_INIT_I2C == YES) i2c_init();
    uint8_t commandSequence[sizeof(init_sequence)+1];
    for (uint8_t i = 0; i < sizeof (init_sequence); i++) {
 b4a:	2b 31       	cpi	r18, 0x1B	; 27
 b4c:	31 05       	cpc	r19, r1
 b4e:	99 f7       	brne	.-26     	; 0xb36 <lcd_init+0x22>
        commandSequence[i] = (pgm_read_byte(&init_sequence[i]));
    }
    commandSequence[sizeof(init_sequence)]=(dispAttr);
 b50:	1c 8f       	std	Y+28, r17	; 0x1c
    lcd_command(commandSequence, sizeof(commandSequence));
 b52:	6c e1       	ldi	r22, 0x1C	; 28
 b54:	14 de       	rcall	.-984    	; 0x77e <lcd_command>
    lcd_clrscr();
 b56:	74 de       	rcall	.-792    	; 0x840 <lcd_clrscr>
}
 b58:	6c 96       	adiw	r28, 0x1c	; 28
 b5a:	0f b6       	in	r0, 0x3f	; 63
 b5c:	f8 94       	cli
 b5e:	de bf       	out	0x3e, r29	; 62
 b60:	0f be       	out	0x3f, r0	; 63
 b62:	cd bf       	out	0x3d, r28	; 61
 b64:	cf 91       	pop	r28
 b66:	df 91       	pop	r29
 b68:	1f 91       	pop	r17
 b6a:	08 95       	ret

00000b6c <i2c_init>:
*/
#include "i2c.h"
#include <avr/interrupt.h>

void i2c_init(void){
	LCD_PORT |= (1 << SDA_Pin)|(1 << SDC_Pin);		// experimental, pullups for 12c_bus
 b6c:	85 b3       	in	r24, 0x15	; 21
 b6e:	80 63       	ori	r24, 0x30	; 48
 b70:	85 bb       	out	0x15, r24	; 21
	LCD_PORT_DDR |= (1 << SDA_Pin)|(1 << SDC_Pin);
 b72:	84 b3       	in	r24, 0x14	; 20
 b74:	80 63       	ori	r24, 0x30	; 48
 b76:	84 bb       	out	0x14, r24	; 20
			break;
		case 64:
			TWSR = 0x3;
			break;
		default:
			TWSR = 0x00;
 b78:	11 b8       	out	0x01, r1	; 1
			break;
	}
	TWBR = (uint8_t)SET_TWBR;
 b7a:	82 e0       	ldi	r24, 0x02	; 2
 b7c:	80 b9       	out	0x00, r24	; 0
	// enable
	TWCR = (1 << TWEN);
 b7e:	84 e0       	ldi	r24, 0x04	; 4
 b80:	86 bf       	out	0x36, r24	; 54
}
 b82:	08 95       	ret

00000b84 <lcd_send_i2c_start>:
void lcd_send_i2c_start(void){
    // i2c start
    TWCR = (1 << TWINT)|(1 << TWSTA)|(1 << TWEN);
 b84:	84 ea       	ldi	r24, 0xA4	; 164
 b86:	86 bf       	out	0x36, r24	; 54
    while((TWCR & (1 << TWINT)) == 0);
 b88:	06 b6       	in	r0, 0x36	; 54
 b8a:	07 fe       	sbrs	r0, 7
 b8c:	fd cf       	rjmp	.-6      	; 0xb88 <lcd_send_i2c_start+0x4>
    // send adress
    TWDR = LCD_I2C_ADDR;
 b8e:	88 e7       	ldi	r24, 0x78	; 120
 b90:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT)|( 1 << TWEN);
 b92:	84 e8       	ldi	r24, 0x84	; 132
 b94:	86 bf       	out	0x36, r24	; 54
    while((TWCR & (1 << TWINT)) == 0);
 b96:	06 b6       	in	r0, 0x36	; 54
 b98:	07 fe       	sbrs	r0, 7
 b9a:	fd cf       	rjmp	.-6      	; 0xb96 <lcd_send_i2c_start+0x12>
}
 b9c:	08 95       	ret

00000b9e <lcd_send_i2c_stop>:
void lcd_send_i2c_stop(void){
    // i2c stop
    TWCR = (1 << TWINT)|(1 << TWSTO)|(1 << TWEN);
 b9e:	84 e9       	ldi	r24, 0x94	; 148
 ba0:	86 bf       	out	0x36, r24	; 54
}
 ba2:	08 95       	ret

00000ba4 <lcd_send_i2c_byte>:
void lcd_send_i2c_byte(uint8_t byte){
    TWDR = byte;
 ba4:	83 b9       	out	0x03, r24	; 3
    TWCR = (1 << TWINT)|( 1 << TWEN);
 ba6:	84 e8       	ldi	r24, 0x84	; 132
 ba8:	86 bf       	out	0x36, r24	; 54
    while((TWCR & (1 << TWINT)) == 0);
 baa:	06 b6       	in	r0, 0x36	; 54
 bac:	07 fe       	sbrs	r0, 7
 bae:	fd cf       	rjmp	.-6      	; 0xbaa <lcd_send_i2c_byte+0x6>
 bb0:	08 95       	ret

00000bb2 <__eerd_byte_m8>:
 bb2:	e1 99       	sbic	0x1c, 1	; 28
 bb4:	fe cf       	rjmp	.-4      	; 0xbb2 <__eerd_byte_m8>
 bb6:	9f bb       	out	0x1f, r25	; 31
 bb8:	8e bb       	out	0x1e, r24	; 30
 bba:	e0 9a       	sbi	0x1c, 0	; 28
 bbc:	99 27       	eor	r25, r25
 bbe:	8d b3       	in	r24, 0x1d	; 29
 bc0:	08 95       	ret

00000bc2 <__eerd_word_m8>:
 bc2:	a8 e1       	ldi	r26, 0x18	; 24
 bc4:	b0 e0       	ldi	r27, 0x00	; 0
 bc6:	42 e0       	ldi	r20, 0x02	; 2
 bc8:	50 e0       	ldi	r21, 0x00	; 0
 bca:	02 c0       	rjmp	.+4      	; 0xbd0 <__eerd_blraw_m8>

00000bcc <__eerd_block_m8>:
 bcc:	dc 01       	movw	r26, r24
 bce:	cb 01       	movw	r24, r22

00000bd0 <__eerd_blraw_m8>:
 bd0:	fc 01       	movw	r30, r24
 bd2:	e1 99       	sbic	0x1c, 1	; 28
 bd4:	fe cf       	rjmp	.-4      	; 0xbd2 <__eerd_blraw_m8+0x2>
 bd6:	06 c0       	rjmp	.+12     	; 0xbe4 <__eerd_blraw_m8+0x14>
 bd8:	ff bb       	out	0x1f, r31	; 31
 bda:	ee bb       	out	0x1e, r30	; 30
 bdc:	e0 9a       	sbi	0x1c, 0	; 28
 bde:	31 96       	adiw	r30, 0x01	; 1
 be0:	0d b2       	in	r0, 0x1d	; 29
 be2:	0d 92       	st	X+, r0
 be4:	41 50       	subi	r20, 0x01	; 1
 be6:	50 40       	sbci	r21, 0x00	; 0
 be8:	b8 f7       	brcc	.-18     	; 0xbd8 <__eerd_blraw_m8+0x8>
 bea:	08 95       	ret

00000bec <_exit>:
 bec:	f8 94       	cli

00000bee <__stop_program>:
 bee:	ff cf       	rjmp	.-2      	; 0xbee <__stop_program>
